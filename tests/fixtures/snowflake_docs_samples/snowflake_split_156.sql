-- Example 10432
GRANT APPLICATION ROLE <acxiom_app_database>.realid_app_role
  TO ROLE samooha_app_role;

-- Example 10433
USE ROLE acxiom_admin_role;

-- Example 10434
GRANT APPLICATION ROLE <acxiom_app_database>.realid_app_role TO ROLE samooha_app_role;

-- Example 10435
GRANT APPLICATION ROLE <merkury_app_database>.DCR_DB_ROLE TO ROLE samooha_app_role;

-- Example 10436
USE ROLE tu_admin_role;

-- Example 10437
GRANT APPLICATION ROLE <transunion_app_database>.tru_app_public
   TO ROLE SAMOOHA_APP_ROLE;

GRANT SELECT, INSERT
   ON TABLE SAMOOHA_BY_SNOWFLAKE_LOCAL_DB.PUBLIC.SAMOOHA_INTERNAL_TRANSUNION_ID_GENERATION_RECORDS
   TO ROLE SAMOOHA_APP_ROLE;

-- Example 10438
USE ROLE ACCOUNTADMIN;

DESCRIBE PROCEDURE SAMOOHA_BY_SNOWFLAKE_LOCAL_DB.PUBLIC.GRANT_EXTERNAL_APP_ROLE;

-- Example 10439
USE ROLE ACCOUNTADMIN;

CREATE OR REPLACE PROCEDURE SAMOOHA_BY_SNOWFLAKE_LOCAL_DB.PUBLIC.GRANT_EXTERNAL_APP_ROLE(APP_ROLE string, APPLICATION string)
   RETURNS string
   LANGUAGE SQL
   EXECUTE AS OWNER
   AS
   $$
   GRANT APPLICATION ROLE IDENTIFIER(:APP_ROLE) TO APPLICATION IDENTIFIER(:APPLICATION);
   $$;

GRANT USAGE ON PROCEDURE SAMOOHA_BY_SNOWFLAKE_LOCAL_DB.PUBLIC.GRANT_EXTERNAL_APP_ROLE(string, string)
  TO ROLE SAMOOHA_APP_ROLE;

-- Example 10440
TRUNCATE SAMOOHA_BY_SNOWFLAKE_LOCAL_DB.PUBLIC.SAMOOHA_INTERNAL_TRANSUNION_ID_GENERATION_RECORDS;

-- Example 10441
DELETE FROM SAMOOHA_BY_SNOWFLAKE_LOCAL_DB.PUBLIC.SAMOOHA_INTERNAL_TRANSUNION_ID_GENERATION_RECORDS
  WHERE inputid IN ('123456', 'abcedf');

-- Example 10442
DELETE FROM SAMOOHA_BY_SNOWFLAKE_LOCAL_DB.PUBLIC.SAMOOHA_INTERNAL_TRANSUNION_ID_GENERATION_RECORDS
  WHERE INPUTID IN (
    SELECT user_id as INPUTID
    FROM my_db.my_schema.ref_table
  );

-- Example 10443
INSERT INTO SAMOOHA_BY_SNOWFLAKE_LOCAL_DB.PUBLIC.SAMOOHA_INTERNAL_TRANSUNION_ID_GENERATION_RECORDS (
  INPUTID,
  COLLABORATIONID,
  LASTPROCESSED
SELECT
  INPUTID,
  COLLABORATIONID,
  LASTPROCESSED
FROM <TRANSUNION_APPLICATION_DATABASE>.SHARE_SCHEMA.REF_MATCHING_OUTPUT_VIEW
WHERE BATCHID = '<BATCH_ID>';

-- Example 10444
MERGE INTO SAMOOHA_BY_SNOWFLAKE_LOCAL_DB.PUBLIC.SAMOOHA_INTERNAL_TRANSUNION_ID_GENERATION_RECORDS CT
USING <TRANSUNION_APPLICATION_DATABASE>.SHARE_SCHEMA.REF_MATCHING_OUTPUT_VIEW OT
  ON
    CT.INPUTID = OT.INPUTID
    AND OT.BATCHID = '<BATCH_ID>'
WHEN MATCHED THEN
  UPDATE SET
    CT.COLLABORATIONID = OT.COLLABORATIONID,
    CT.LASTPROCESSED = OT.LASTPROCESSED
WHEN NOT MATCHED THEN
  INSERT (
    INPUTID,
    COLLABORATIONID,
    LASTPROCESSED
  ) VALUES (
      OT.INPUTID,
      OT.COLLABORATIONID,
      OT.LASTPROCESSED
  );

-- Example 10445
INSERT INTO SAMOOHA_BY_SNOWFLAKE_LOCAL_DB.PUBLIC.SAMOOHA_INTERNAL_TRANSUNION_ID_GENERATION_RECORDS (
  INPUTID,
  COLLABORATIONID,
  LASTPROCESSED
)
  SELECT
    INPUTID,
    COLLABORATIONID,
    LASTPROCESSED
  FROM <TRANSUNION_APPLICATION_DATABASE>.SHARE_SCHEMA.REF_MATCHING_OUTPUT_VIEW
  WHERE INPUTID IN (
    SELECT <column_name_containing_input_ids_to_be_added> as INPUTID
    FROM <dataset_fqtn_containing_input_ids_to_be_added>
    )
    AND BATCHID = '<BATCH_ID>';

-- Example 10446
SELECT *
   FROM samooha_by_snowflake_local_db.public.template_scanner_results;

-- Example 10447
USE ROLE ACCOUNTADMIN;
CALL system$accept_legal_terms('DATA_EXCHANGE_LISTING', 'GZSTZTP0KKO');
CREATE APPLICATION SAMOOHA_BY_SNOWFLAKE FROM LISTING 'GZSTZTP0KKO';

-- Example 10448
USE ROLE samooha_app_role;
USE WAREHOUSE app_wh;
CALL SAMOOHA_BY_SNOWFLAKE_LOCAL_DB.LIBRARY.CHECK_MOUNT_STATUS();

-- Example 10449
USE ROLE USERADMIN;
CREATE USER <SERVICE-USER-USERNAME> PASSWORD='<SERVICE-USER-PASSWORD>'
FIRST_NAME='DCR' LAST_NAME='Service User'
EMAIL='<SERVICE-USER-EMAIL-ADDRESS>';

-- Example 10450
-- Drop created and installed (joined) clean rooms, if you have not done so.

USE ROLE ACCOUNTADMIN;

-- 1: Drop listings --
-- 1.1 Generate the SQL commands:
SHOW listings;
WITH listings AS (
    SELECT * FROM TABLE(result_scan(last_query_id()))
    WHERE "name" ilike 'SAMOOHA^_CLEANROOM^_%' ESCAPE '^'
),
alter_n_drop_listings AS (
    SELECT 'ALTER LISTING ' || "name" || ' UNPUBLISH;DROP LISTING ' || "name" || ';'
    FROM listings WHERE "state" = 'PUBLISHED'
),
drop_listings AS (
    SELECT 'DROP LISTING ' || "name" || ';'
    FROM listings WHERE "state" = 'UNPUBLISHED'
)
SELECT * FROM alter_n_drop_listings
UNION ALL
SELECT * FROM drop_listings;
)
-- 1.2 Run the ALTER LISTING commands generated by the previous SELECT statement.

-- 2: Drop shares --
-- 2.1 Generate the SQL commands:
SHOW SHARES;
SELECT CONCAT('DROP SHARE ', "name", ';')
  FROM TABLE(RESULT_SCAN(last_query_id()))
  WHERE "kind" = 'OUTBOUND'
    AND "name" LIKE 'SAMOOHA_CLEANROOM_%';

-- 2.2 Run the DROP SHARE commands generated by the previous SELECT statement.

-- These shares have to be dropped manually:
DROP SHARE SAMOOHA_INTERNAL_GOVERNANCE_SUMMARY_SHARE_NAV2;
DROP SHARE SAMOOHA_INTERNAL_LOGS_SHARE_NAV2;
DROP SHARE SAMOOHA_INTERNAL_PROVIDER_METADATA_NAV2;
DROP SHARE SAMOOHA_INTERNAL_GOVERNANCE_SUMMARY_SHARE_NAV2_LAF;

-- 3: Drop applications --
-- 3.1 Generate the SQL commands:
SHOW APPLICATIONS;
SELECT CONCAT('DROP APPLICATION ', "name", ' CASCADE;')
  FROM TABLE(RESULT_SCAN(last_query_id()))
  WHERE "name" LIKE 'SAMOOHA_CLEANROOM_APP_%';

-- 3.2 Run the DROP APPLICATION commands generated by the previous SELECT statement.

-- 4: Drop application packages --
-- 4.1 Generate the SQL commands:
SHOW APPLICATION PACKAGES;
SELECT CONCAT('DROP APPLICATION PACKAGE ', "name", ' CASCADE;')
  FROM TABLE(RESULT_SCAN(last_query_id())) WHERE "name" LIKE 'SAMOOHA_CLEANROOM_%';

-- 4.2 Run the DROP APPLICATION PACKAGE commands generated by the previous SELECT statement.

-- 5: Drop databases --
-- 5.1 Generate the SQL commands:
SHOW DATABASES;
SELECT CONCAT('DROP DATABASE ', "name", ';')
  FROM TABLE(RESULT_SCAN(last_query_id()))
  WHERE "name" = 'SAMOOHA_SAMPLE_DATABASE'
    OR "name" LIKE 'SAMOOHA_CLEANROOM_%'
    OR "name" = 'SAMOOHA_BY_SNOWFLAKE_LOCAL_DB'
    OR "name" LIKE 'SAMOOHA_INTERNAL_GOVERNANCE_%'
    AND NOT startswith("name", 'SAMOOHA_CLEANROOM_CONSUMER_');

-- 5.2 Run the DROP DATABASE commands generated by the previous SELECT statement.

-- 6: Drop warehouses --
-- 6.1 Generate the SQL commands:
SHOW WAREHOUSES;
SELECT 'DROP WAREHOUSE IF EXISTS ' || "name" || ';' AS drop_statements
FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()))
WHERE "name" LIKE 'APP\_WH%'
  OR "name" LIKE 'DCR\_WH%'
  OR "name" LIKE 'PROVIDER\_RUN\_%'
  OR "name" LIKE 'SAMOOHA_TASK_WAREHOUSE'
ORDER BY "name";

-- 6.2 Run the DROP WAREHOUSES commands generated by the previous SELECT statement.

-- 7: Finally drop the Snowflake native app
DROP APPLICATION SAMOOHA_BY_SNOWFLAKE CASCADE;

-- Example 10451
USE ROLE accountadmin;

GRANT ROLE samooha_app_role TO USER joe;

-- Example 10452
USE ROLE ACCOUNTADMIN;
CREATE ROLE MARKETING_ANALYST_ROLE;
GRANT USAGE ON WAREHOUSE APP_WH TO MARKETING_ANALYST_ROLE; -- Or whichever warehouse you are using
GRANT ROLE MARKETING_ANALYST_ROLE TO USER george.washington;

-- Example 10453
CALL samooha_by_snowflake_local_db.consumer.grant_run_on_cleanrooms_to_role(
  ['overlap_cleanroom', 'market_share_cleanroom'],
  'MARKETING_ANALYST_ROLE'
);

-- Example 10454
-- User george.washington logs in and uses the proper role.
 USE WAREHOUSE APP_WH
 USE ROLE MARKETING_ANALYST_ROLE;

 -- Consumer-run analyses should succeed.
 CALL samooha_by_snowflake_local_db.consumer.run_analysis(
   $cleanroom_name,
   'prod_overlap_analysis',
   ['SAMOOHA_SAMPLE_DATABASE.MYDATA.CONVERSIONS'],  -- Consumer tables
   ['SAMOOHA_SAMPLE_DATABASE.DEMO.EXPOSURES'],      -- Provider tables
   object_construct(
     'max_age', 30
   )
 );

-- Most other procedures will fail.
CALL samooha_by_snowflake_local_db.provider.cleanroom_init($cleanroom_name, 'INTERNAL');

-- Example 10455
SHOW GRANTS OF ROLE <run_role_name>;

-- Example 10456
USE ROLE ACCOUNTADMIN;

CREATE WAREHOUSE my_big_warehouse WITH WAREHOUSE_SIZE = X5LARGE;
GRANT USAGE, OPERATE ON WAREHOUSE my_big_warehouse TO ROLE SAMOOHA_APP_ROLE;

-- Example 10457
SELECT *,
  TRY_PARSE_JSON(query_tag) AS query_tag_details
  FROM snowflake.account_usage.query_history
  WHERE query_tag_details IS NOT NULL
    AND query_tag_details:request_type = 'DCR'
    AND query_tag_details:user_email = 'joe@example.com';

-- Example 10458
-- Retrieve clean room UUID
SELECT cleanroom_id FROM samooha_by_snowflake_local_db.public.cleanroom_record
  WHERE cleanroom_name = '<cleanroom_name>';

-- Retrieve queries with provider-run query tag
SELECT * FROM snowflake.account_usage.query_history
  WHERE query_tag = cleanroom_id || '<provider_account_locator>;

-- Example 10459
SHOW AUTHENTICATION POLICIES;

-- Example 10460
call samooha_by_snowflake_local_db.provider.add_consumers(
  $cleanroom_name, 'ACCOUNT_IN_OTHER_REGION', 'ORGNAME.ACCOUNTNAME');
call samooha_by_snowflake_local_db.provider.create_or_update_cleanroom_listing($cleanroom_name);

-- **FAILURE**: Cannot enable LAF for this cleanroom.
--   Please enable LAF for Samooha on the account first through
--   the Samooha web application.

call samooha_by_snowflake_local_db.provider.remove_consumers(
  $cleanroom_name, 'ACCOUNT_IN_OTHER_REGION');
samooha_by_snowflake_local_db.provider.create_or_update_cleanroom_listing($cleanroom_name);

-- Success

-- Example 10461
CALL samooha_by_snowflake_local_db.library.register_schema(['MY_DB.MY_SCHEMA']);

-- Example 10462
USE ROLE ACCOUNTADMIN;
CALL samooha_by_snowflake_local_db.library.enable_external_tables_on_account();

-- Example 10463
USE ROLE SAMOOHA_APP_ROLE;
CALL samooha_by_snowflake_local_db.provider.enable_external_tables_for_cleanroom(
  $cleanroom_name);

-- Call until scan is complete.
call samooha_by_snowflake_local_db.provider.view_cleanroom_scan_status($cleanroom_name);

-- When scan is successful, update with patch version mentioned in return value from enable_external_tables_for_cleanroom.
call samooha_by_snowflake_local_db.provider.set_default_release_directive($cleanroom_name, 'V1_0', '<PATCH_VERSION>');

-- Example 10464
USE ROLE SAMOOHA_APP_ROLE;
CALL samooha_by_snowflake_local_db.consumer.enable_external_tables_for_cleanroom(
  $cleanroom_name);

-- Example 10465
CALL samooha_by_snowflake_local_db.library.enable_local_db_auto_upgrades();

-- Example 10466
CREATE DATABASE shared_db1 FROM SHARE ab12345.share1;

CREATE DATABASE shared_db2 FROM SHARE ab12345.share2;

-- Example 10467
GRANT DATABASE ROLE shared_db1.dr1 TO ROLE PUBLIC;

-- Example 10468
GRANT IMPORTED PRIVILEGES ON DATABASE shared_db1 TO ROLE PUBLIC;

GRANT IMPORTED PRIVILEGES ON DATABASE shared_db2 TO ROLE PUBLIC;

-- Example 10469
GRANT USAGE ON WAREHOUSE testing_vw TO ROLE PUBLIC;

-- Example 10470
GRANT ALL ON WAREHOUSE testing_vs TO ROLE SYSADMIN;

-- Example 10471
ALTER USER ra_user1 RESET PASSWORD;

ALTER USER ra_user2 RESET PASSWORD;

-- Example 10472
USE ROLE ACCOUNTADMIN;

GRANT CREATE ACCOUNT ON ACCOUNT TO ROLE SYSADMIN;

-- Example 10473
USE ROLE ACCOUNTADMIN;

CREATE MANAGED ACCOUNT <account_name>
    ADMIN_NAME = <username> , ADMIN_PASSWORD = '<password>' ,
    TYPE = READER;

-- Example 10474
+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| status                                                                                                                                                                            |
|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| {"accountName":"READER_ACCT1","accountLocator":"IIB88126","url":"https://myorg-reader_acct1.snowflakecomputing.com","accountLocatorUrl":"https://iib88126.snowflakecomputing.com"}|
+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

-- Example 10475
USE ROLE ACCOUNTADMIN;

DROP MANAGED ACCOUNT reader_acct1;

-- Example 10476
USE ROLE ACCOUNTADMIN;

SHOW MANAGED ACCOUNTS;

-- Example 10477
CREATE OR REPLACE SHARE allow_non_secure_views
 SECURE_OBJECTS_ONLY=FALSE
 COMMENT="Share views that require query optimization";

-- Example 10478
GRANT SELECT ON VIEW non_secure_view TO SHARE allow_non_secure_views;

-- Example 10479
GRANT SELECT ON VIEW non_secure_view TO DATABASE ROLE performance_engineer;
GRANT DATABASE ROLE performance_engineer TO SHARE allow_non_secure_views;

-- Example 10480
SHOW GRANTS TO SHARE secure_views_only;
SHOW GRANTS OF SHARE secure_views_only;

-- Example 10481
ALTER SHARE secure_views_only
 SET SECURE_OBJECTS_ONLY = FALSE,
 COMMENT = "Convert to allow sharing non-secure views that require
 query optimization";

-- Example 10482
ALTER VIEW secure_view2 UNSET SECURE;

-- Example 10483
ALTER VIEW high_performance_view UNSET SECURE;

-- Example 10484
CREATE OR REPLACE VIEW high_performance_view WITH COPY GRANTS;

-- Example 10485
CREATE [ OR REPLACE ] SHARE <name>
[ SECURE_OBJECTS_ONLY = <boolean> ]
[ COMMENT = '<string_literal>' ]

-- Example 10486
CREATE DATABASE ROLE d1.r1;

CREATE DATABASE ROLE d1.r2;

-- Example 10487
USE DATABASE d1;

CREATE DATABASE ROLE r1;

CREATE DATABASE ROLE r2;

-- Example 10488
GRANT USAGE ON SCHEMA d1.s1 TO DATABASE ROLE d1.r1;
GRANT SELECT ON VIEW d1.s1.v1 TO DATABASE ROLE d1.r1;

-- Example 10489
GRANT USAGE ON SCHEMA d1.s1 TO DATABASE ROLE d1.r2;
GRANT SELECT ON VIEW d1.s1.v2 TO DATABASE ROLE d1.r2;

-- Example 10490
SHOW GRANTS TO DATABASE ROLE d1.r1;
SHOW GRANTS TO DATABASE ROLE d1.r2;

-- Example 10491
USE DATABASE d1;

SHOW GRANTS TO DATABASE ROLE r1;
SHOW GRANTS TO DATABASE ROLE r2;

-- Example 10492
CREATE SHARE share1;

-- Example 10493
GRANT USAGE ON DATABASE d1 TO SHARE share1;

-- Example 10494
GRANT DATABASE ROLE d1.r1 TO SHARE share1;
GRANT DATABASE ROLE d1.r2 TO SHARE share1;

-- Example 10495
ALTER SHARE share1 ADD ACCOUNTS = org1.consumer1,org1.consumer2;

-- Example 10496
ALTER DATABASE ROLE d1.r1 RENAME TO d1.r3;

-- Example 10497
ALTER DATABASE ROLE d1.r1 RENAME TO d2.r1;

-- Example 10498
DROP DATABASE ROLE d1.r2;

