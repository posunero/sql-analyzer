// Lark grammar for Snowflake SQL
%import common.SIGNED_NUMBER
%import common.INT -> UNSIGNED_INTEGER
%import common.ESCAPED_STRING
%import common.WS
%ignore WS
%ignore /--[^\n]*/

// Comments and Whitespace
%ignore WS
%ignore /--[^\n]*/    // Ignore single-line comments
C_COMMENT: /\/\*[^*]*\*+(?:[^\/][^*]*\*+)*\//s // Define C-style comments - fixed syntax
%ignore C_COMMENT  // Ignore C-style comments

// Define all terminals (keywords) as uppercase
SELECT: "SELECT"i
FROM: "FROM"i
WHERE: "WHERE"i
GROUP: "GROUP"i
GROUPS: "GROUPS"i
BY: "BY"i
HAVING: "HAVING"i
QUALIFY: "QUALIFY"i
ORDER: "ORDER"i
LIMIT: "LIMIT"i
WITH: "WITH"i
AS: "AS"i
AND: "AND"i
OR: "OR"i
NOT: "NOT"i
NULL: "NULL"i
TRUE: "TRUE"i
FALSE: "FALSE"i
INSERT: "INSERT"i
INTO: "INTO"i
VALUES: "VALUES"i
UPDATE: "UPDATE"i
SET: "SET"i
DELETE: "DELETE"i
LIKE: "LIKE"i
IN: "IN"i
IS: "IS"i
JOIN: "JOIN"i
ON: "ON"i
USING: "USING"i
USE: "USE"i
IF: "IF"i
EXISTS: "EXISTS"i
BETWEEN: "BETWEEN"i
MERGE: "MERGE"i
WHEN: "WHEN"i
MATCHED: "MATCHED"i
THEN: "THEN"i
TYPE: "TYPE"i
ON_ERROR: "ON_ERROR"i
GRANT: "GRANT"i
REVOKE: "REVOKE"i
ALL: "ALL"i
APPLY: "APPLY"i
PRIVILEGES: "PRIVILEGES"i
USAGE: "USAGE"i
ROLE: "ROLE"i
FUTURE: "FUTURE"i
TAG: "TAG"i
ACCESS: "ACCESS"i
ROW: "ROW"i
BOOLEAN: "BOOLEAN"i
TRANSIENT: "TRANSIENT"i
CLUSTER: "CLUSTER"i
DATA_RETENTION_TIME_IN_DAYS: "DATA_RETENTION_TIME_IN_DAYS"i
NUMBER: "NUMBER"i
INT: "INT"i
INTEGER: "INTEGER"i
VARCHAR: "VARCHAR"i
DOUBLE: "DOUBLE"i
FLOAT: "FLOAT"i
TIME: "TIME"i
DATE: "DATE"i
TIMESTAMP: "TIMESTAMP"i
TIMESTAMP_NTZ: "TIMESTAMP_NTZ"i
TIMESTAMP_LTZ: "TIMESTAMP_LTZ"i
TIMESTAMP_TZ: "TIMESTAMP_TZ"i
TZ: "TZ"i
VARIANT: "VARIANT"i
RESULTSET: "RESULTSET"i
OBJECT: "OBJECT"i
ARRAY: "ARRAY"i
MAP: "MAP"i
GEOGRAPHY: "GEOGRAPHY"i

// DDL Commands
CREATE: "CREATE"i
ALTER: "ALTER"i
DROP: "DROP"i
TRUNCATE: "TRUNCATE"i
SHOW: "SHOW"i
PARAMETERS: "PARAMETERS"i
FAILOVER: "FAILOVER"i
RECOVERY: "RECOVERY"i
DESC: "DESC"i
DESCRIBE: "DESCRIBE"i
COMMENT: "COMMENT"i
REPLACE: "REPLACE"i
REFRESH: "REFRESH"i
ENABLE: "ENABLE"i
DISABLE: "DISABLE"i
SEARCH: "SEARCH"i
OPTIMIZATION: "OPTIMIZATION"i

// Object types
TABLE: "TABLE"i
VIEW: "VIEW"i
DATABASE: "DATABASE"i
SCHEMA: "SCHEMA"i
ACCOUNT: "ACCOUNT"i
WAREHOUSE: "WAREHOUSE"i
TASK: "TASK"i
JOB: "JOB"i
STREAM: "STREAM"i
STAGE: "STAGE"i
PROCEDURE: "PROCEDURE"i
FUNCTION: "FUNCTION"i
SEQUENCE: "SEQUENCE"i
MATERIALIZED: "MATERIALIZED"i
RESOURCE: "RESOURCE"i
MONITOR: "MONITOR"i
PIPE: "PIPE"i
ICEBERG: "ICEBERG"i
PACKAGE: "PACKAGE"i
INSTALL: "INSTALL"i
ALERT: "ALERT"i
AUTHENTICATION: "AUTHENTICATION"i

// New object types for unsupported features
STREAMLIT: "STREAMLIT"i
DYNAMIC: "DYNAMIC"i
HYBRID: "HYBRID"i
DATASET: "DATASET"i
MODEL: "MODEL"i
SNAPSHOT: "SNAPSHOT"i
VOLUME: "VOLUME"i
CATALOG: "CATALOG"i
CONNECTION: "CONNECTION"i
PASSWORD: "PASSWORD"i
MASKING: "MASKING"i
POLICY: "POLICY"i
POLICIES: "POLICIES"i
NETWORK: "NETWORK"i
RULE: "RULE"i
RULES: "RULES"i
SECRET: "SECRET"i
TRANSACTION: "TRANSACTION"i

// Column constraints
PRIMARY: "PRIMARY"i
KEY: "KEY"i
FOREIGN: "FOREIGN"i
REFERENCES: "REFERENCES"i
UNIQUE: "UNIQUE"i
DEFAULT: "DEFAULT"i
COLUMN: "COLUMN"i
ADD: "ADD"i
MODIFY: "MODIFY"i
REMOVE: "REMOVE"i
DATA: "DATA"i
ENABLED: "ENABLED"i

RENAME: "RENAME"i
TO: "TO"i

// Autoincrement/Identity keywords
AUTOINCREMENT: "AUTOINCREMENT"i
IDENTITY: "IDENTITY"i
START: "START"i
INCREMENT: "INCREMENT"i

// Snowflake specific
WAREHOUSE_SIZE: "WAREHOUSE_SIZE"i
AUTO_SUSPEND: "AUTO_SUSPEND"i
AUTO_RESUME: "AUTO_RESUME"i
INITIALLY_SUSPENDED: "INITIALLY_SUSPENDED"i
SCHEDULE: "SCHEDULE"i
SUSPEND: "SUSPEND"i
RESUME: "RESUME"i
APPEND_ONLY: "APPEND_ONLY"i
SHOW_INITIAL_ROWS: "SHOW_INITIAL_ROWS"i
FILE_FORMAT: "FILE_FORMAT"i
URL: "URL"i
RETURNS: "RETURNS"i
LANGUAGE: "LANGUAGE"i
AFTER: "AFTER"i
ALLOW_OVERLAPPING_EXECUTION: "ALLOW_OVERLAPPING_EXECUTION"i
USER_TASK_TIMEOUT_MS: "USER_TASK_TIMEOUT_MS"i
MAX_CONCURRENCY: "MAX_CONCURRENCY"i
AUTO_INGEST: "AUTO_INGEST"i
AWS_SNS_TOPIC: "AWS_SNS_TOPIC"i
AZURE_EVENT_GRID_TOPIC: "AZURE_EVENT_GRID_TOPIC"i
GCP_PUBSUB_SUBSCRIPTION: "GCP_PUBSUB_SUBSCRIPTION"i
AT: "AT"i
BEFORE: "BEFORE"i
OFFSET: "OFFSET"i
STATEMENT: "STATEMENT"i
INPUT: "INPUT"i
CAST: "CAST"i
INNER: "INNER"i
LEFT: "LEFT"i
RIGHT: "RIGHT"i
FULL: "FULL"i
CROSS: "CROSS"i
NATURAL: "NATURAL"i
OUTER: "OUTER"i
ASC: "ASC"i
RANGE: "RANGE"i
ROWS: "ROWS"i
TABLES: "TABLES"i
VIEWS: "VIEWS"i
WAREHOUSES: "WAREHOUSES"i
TASKS: "TASKS"i
STREAMS: "STREAMS"i
STAGES: "STAGES"i
DATABASES: "DATABASES"i
SCHEMAS: "SCHEMAS"i
SEQUENCES: "SEQUENCES"i
FUNCTIONS: "FUNCTIONS"i
PROCEDURES: "PROCEDURES"i
FORMATS: "FORMATS"i
ELSE: "ELSE"i
END: "END"i
ANY: "ANY"i
SOME: "SOME"i
DISTINCT: "DISTINCT"i
CASE: "CASE"i
CURRENT: "CURRENT"i
COPY: "COPY"i
SHARES: "SHARES"i
INTEGRATIONS: "INTEGRATIONS"i
REPLICATIONS: "REPLICATIONS"i
USERS: "USERS"i
ROLES: "ROLES"i
ACCOUNTS: "ACCOUNTS"i
SESSION: "SESSION"i

// New keywords for unsupported features
MAIN_FILE: "MAIN_FILE"i
SPECIFICATION_TEMPLATE_FILE: "SPECIFICATION_TEMPLATE_FILE"i
SPECIFICATION_FILE: "SPECIFICATION_FILE"i
MIN_INSTANCES: "MIN_INSTANCES"i
MAX_INSTANCES: "MAX_INSTANCES"i
SPEC: "SPEC"i
CONTAINERS: "CONTAINERS"i
ENDPOINTS: "ENDPOINTS"i
PUBLIC: "PUBLIC"i
READINESS_PROBE: "READINESS_PROBE"i
PATH: "PATH"i
RECURSIVE: "RECURSIVE"i
PORT: "PORT"i
ENV: "ENV"i
SERVER_PORT: "SERVER_PORT"i
CHARACTER_NAME: "CHARACTER_NAME"i
QUERY_WAREHOUSE: "QUERY_WAREHOUSE"i
TARGET_LAG: "TARGET_LAG"i
REFRESH_MODE: "REFRESH_MODE"i
INCREMENTAL: "INCREMENTAL"i
INITIALIZE: "INITIALIZE"i
ON_CREATE: "ON_CREATE"i
EXTERNAL_VOLUME: "EXTERNAL_VOLUME"i
BASE_LOCATION: "BASE_LOCATION"i
STORAGE_SERIALIZATION_POLICY: "STORAGE_SERIALIZATION_POLICY"i
OPTIMIZED: "OPTIMIZED"i
COMPATIBLE: "COMPATIBLE"i
CONVERT: "CONVERT"i
MANAGED: "MANAGED"i
UNDROP: "UNDROP"i
STREAMLITS: "STREAMLITS"i
DYNAMIC_TABLES: "DYNAMIC_TABLES"i
HYBRID_TABLES: "HYBRID_TABLES"i
DATASETS: "DATASETS"i
MODELS: "MODELS"i
SNAPSHOTS: "SNAPSHOTS"i
EXTERNAL_VOLUMES: "EXTERNAL_VOLUMES"i
VOLUMES: "VOLUMES"i
CONNECTIONS: "CONNECTIONS"i
POOLS: "POOLS"i
STORAGE_LOCATIONS: "STORAGE_LOCATIONS"i
NAME: "NAME"i
STORAGE_PROVIDER: "STORAGE_PROVIDER"i
STORAGE_BASE_URL: "STORAGE_BASE_URL"i
STORAGE_AWS_ROLE_ARN: "STORAGE_AWS_ROLE_ARN"i
AZURE_TENANT_ID: "AZURE_TENANT_ID"i
STORAGE_GCP_SERVICE_ACCOUNT: "STORAGE_GCP_SERVICE_ACCOUNT"i
AZURE: "AZURE"i
GCS: "GCS"i
CATALOG_SOURCE: "CATALOG_SOURCE"i
TABLE_FORMAT: "TABLE_FORMAT"i
POLARIS: "POLARIS"i
OBJECT_STORE: "OBJECT_STORE"i
ICEBERG_REST: "ICEBERG_REST"i
CATALOG_NAMESPACE: "CATALOG_NAMESPACE"i
REST_CONFIG: "REST_CONFIG"i
CATALOG_URI: "CATALOG_URI"i
CATALOG_NAME: "CATALOG_NAME"i
REST_AUTHENTICATION: "REST_AUTHENTICATION"i
OAUTH: "OAUTH"i
OAUTH_CLIENT_ID: "OAUTH_CLIENT_ID"i
OAUTH_CLIENT_SECRET: "OAUTH_CLIENT_SECRET"i
OAUTH_ALLOWED_SCOPES: "OAUTH_ALLOWED_SCOPES"i
OAUTH_TOKEN_URI: "OAUTH_TOKEN_URI"i
METADATA_FILE_PATH: "METADATA_FILE_PATH"i
CATALOG_TABLE_NAME: "CATALOG_TABLE_NAME"i
AUTO_REFRESH: "AUTO_REFRESH"i
MIN_NODES: "MIN_NODES"i
MAX_NODES: "MAX_NODES"i
INSTANCE_FAMILY: "INSTANCE_FAMILY"i
CPU_X64_XS: "CPU_X64_XS"i
DEFAULT_NOTEBOOK_COMPUTE_POOL_GPU: "DEFAULT_NOTEBOOK_COMPUTE_POOL_GPU"i
DEFAULT_NOTEBOOK_COMPUTE_POOL_CPU: "DEFAULT_NOTEBOOK_COMPUTE_POOL_CPU"i
APPLICATION_PACKAGE: "APPLICATION_PACKAGE"i
RELEASE_DIRECTIVES: "RELEASE_DIRECTIVES"i
DIRECTIVE: "DIRECTIVE"i
DIRECTIVES: "DIRECTIVES"i
VERSION: "VERSION"i
PATCH: "PATCH"i
PUBLISH: "PUBLISH"i
UNPUBLISH: "UNPUBLISH"i
PASSWORD_MIN_LENGTH: "PASSWORD_MIN_LENGTH"i
PASSWORD_MAX_LENGTH: "PASSWORD_MAX_LENGTH"i
PASSWORD_MIN_UPPER_CASE_CHARS: "PASSWORD_MIN_UPPER_CASE_CHARS"i
PASSWORD_MIN_LOWER_CASE_CHARS: "PASSWORD_MIN_LOWER_CASE_CHARS"i
PASSWORD_MIN_NUMERIC_CHARS: "PASSWORD_MIN_NUMERIC_CHARS"i
PASSWORD_MIN_SPECIAL_CHARS: "PASSWORD_MIN_SPECIAL_CHARS"i
PASSWORD_MIN_AGE_DAYS: "PASSWORD_MIN_AGE_DAYS"i
PASSWORD_MAX_AGE_DAYS: "PASSWORD_MAX_AGE_DAYS"i
PASSWORD_MAX_RETRIES: "PASSWORD_MAX_RETRIES"i
PASSWORD_LOCKOUT_TIME_MINS: "PASSWORD_LOCKOUT_TIME_MINS"i
PASSWORD_HISTORY: "PASSWORD_HISTORY"i
BODY: "BODY"i
EXEMPT_OTHER_POLICIES: "EXEMPT_OTHER_POLICIES"i
CLASSIFICATION_PROFILE: "CLASSIFICATION_PROFILE"i
MAX_DATA_EXTENSION_TIME_IN_DAYS: "MAX_DATA_EXTENSION_TIME_IN_DAYS"i
ENFORCED: "ENFORCED"i
NOVALIDATE: "NOVALIDATE"i
VALIDATE: "VALIDATE"i
RELY: "RELY"i
NORELY: "NORELY"i
CONSTRAINT: "CONSTRAINT"i
EXCLUDE: "EXCLUDE"i
REPLACE_KEYWORD: "REPLACE"i
RENAME_KEYWORD: "RENAME"i
SNOW_PROTOCOL: "SNOW"i
INFER_SCHEMA: "INFER_SCHEMA"i
TEMPLATE: "TEMPLATE"i
ARRAY_AGG: "ARRAY_AGG"i
OBJECT_CONSTRUCT: "OBJECT_CONSTRUCT"i
LOCATION: "LOCATION"i
DELTA: "DELTA"i
LOAD_MODE: "LOAD_MODE"i
ADD_FILES_COPY: "ADD_FILES_COPY"i
MATCH_BY_COLUMN_NAME: "MATCH_BY_COLUMN_NAME"i
CASE_SENSITIVE: "CASE_SENSITIVE"i
USERNAME: "USERNAME"i
OAUTH2_REFRESH_TOKEN: "OAUTH2_REFRESH_TOKEN"i
MODE: "MODE"i
INGRESS: "INGRESS"i
IPV4: "IPV4"i
VALUE_LIST: "VALUE_LIST"i
ALIAS: "ALIAS"i
CURRENT_USER: "CURRENT_USER"i
CURRENT_ROLE: "CURRENT_ROLE"i
REGEXP_REPLACE: "REGEXP_REPLACE"i
DEFAULT_VERSION: "DEFAULT_VERSION"i
SYSTEM: "SYSTEM"i
SAMPLE: "SAMPLE"i
TABLESAMPLE: "TABLESAMPLE"i
BERNOULLI: "BERNOULLI"i
PIVOT: "PIVOT"i
UNPIVOT: "UNPIVOT"i
UNBOUNDED: "UNBOUNDED"i
PRECEDING: "PRECEDING"i
FOLLOWING: "FOLLOWING"i
LIST_ICEBERG_TABLES_FROM_CATALOG: "LIST_ICEBERG_TABLES_FROM_CATALOG"i
LIST_NAMESPACES_FROM_CATALOG: "LIST_NAMESPACES_FROM_CATALOG"i

// CREATE FUNCTION specific
TEMP: "TEMP"i
TEMPORARY: "TEMPORARY"i
SECURE: "SECURE"i
AGGREGATE: "AGGREGATE"i
// RETURNS already exists
// TABLE already exists
CALLED: "CALLED"i
STRICT: "STRICT"i
VOLATILE: "VOLATILE"i
IMMUTABLE: "IMMUTABLE"i
RUNTIME_VERSION: "RUNTIME_VERSION"i
PACKAGES: "PACKAGES"i
IMPORTS: "IMPORTS"i
HANDLER: "HANDLER"i
EXTERNAL_ACCESS_INTEGRATIONS: "EXTERNAL_ACCESS_INTEGRATIONS"i
SECRETS: "SECRETS"i
TARGET_PATH: "TARGET_PATH"i
GRANTS: "GRANTS"i
API_INTEGRATION: "API_INTEGRATION"i
HEADERS: "HEADERS"i
CONTEXT_HEADERS: "CONTEXT_HEADERS"i
MAX_BATCH_ROWS: "MAX_BATCH_ROWS"i
COMPRESSION: "COMPRESSION"i
ALLOWED_VALUES: "ALLOWED_VALUES"i
OBJECT_TYPES: "OBJECT_TYPES"i
ALLOWED_DATABASES: "ALLOWED_DATABASES"i
ALLOWED_SHARES: "ALLOWED_SHARES"i
ALLOWED_ACCOUNTS: "ALLOWED_ACCOUNTS"i
REPLICA: "REPLICA"i
OF: "OF"i
SERVICE: "SERVICE"i
LISTING: "LISTING"i
METRIC: "METRIC"i
LET: "LET"i
CURSOR: "CURSOR"i
FOR: "FOR"i
OPEN: "OPEN"i
COMPUTE: "COMPUTE"i
POOL: "POOL"i
VERSIONED: "VERSIONED"i
APPLICATION: "APPLICATION"i
GPU_NV_M: "GPU_NV_M"i
BIND: "BIND"i
ENDPOINT: "ENDPOINT"i
DISTRIBUTION: "DISTRIBUTION"i
VERSIONS: "VERSIONS"i
RELEASE: "RELEASE"i
UPGRADE_AFTER: "UPGRADE_AFTER"i
UPGRADE: "UPGRADE"i
JOIN_CONSTRAINT: "JOIN_CONSTRAINT"i
JOIN_REQUIRED: "JOIN_REQUIRED"i
REVIEW: "REVIEW"i
LISTINGS: "LISTINGS"i
RELEASES: "RELEASES"i
MANAGE: "MANAGE"i
CONSUMER_ORG: "CONSUMER_ORG"i
CONSUMER_ACCOUNT: "CONSUMER_ACCOUNT"i
PROGRAMS: "PROGRAMS"i
LOOKUP: "LOOKUP"i
OWNER: "OWNER"i
GENERIC_SECRET: "GENERIC_SECRET"i
API_AUTHENTICATION: "API_AUTHENTICATION"i
OAUTH2: "OAUTH2"i
API_KEY: "API_KEY"i
AWS_SIGV4: "AWS_SIGV4"i
AWS_KEY_ID: "AWS_KEY_ID"i
AWS_SECRET_KEY: "AWS_SECRET_KEY"i
EXTERNAL_STAGE: "EXTERNAL_STAGE"i
S3: "S3"i
ALLOWED_NETWORK_RULES: "ALLOWED_NETWORK_RULES"i
ALLOWED_AUTHENTICATION_SECRETS: "ALLOWED_AUTHENTICATION_SECRETS"i
SECURITY: "SECURITY"i
STORAGE: "STORAGE"i
NOTIFICATION: "NOTIFICATION"i
STORAGE_ALLOWED_LOCATIONS: "STORAGE_ALLOWED_LOCATIONS"i
STORAGE_BLOCKED_LOCATIONS: "STORAGE_BLOCKED_LOCATIONS"i
NOTIFICATION_PROVIDER: "NOTIFICATION_PROVIDER"i
GCP_PUBSUB: "GCP_PUBSUB"i
GCP_PUBSUB_SUBSCRIPTION_NAME: "GCP_PUBSUB_SUBSCRIPTION_NAME"i
QUEUE: "QUEUE"i
IMAGE: "IMAGE"i
REPOSITORIES: "REPOSITORIES"i
SERVICES: "SERVICES"i
SPECIFICATION: "SPECIFICATION"i
RSA_PUBLIC_KEY: "RSA_PUBLIC_KEY"i
USER: "USER"i
FIELDS: "FIELDS"i
EXCEPTION: "EXCEPTION"i
RAISE: "RAISE"i
SQLERRM: "SQLERRM"i
ELSEIF: "ELSEIF"i
WHILE: "WHILE"i
LOOP: "LOOP"i
BREAK: "BREAK"i
CONTINUE: "CONTINUE"i
RETURN: "RETURN"i

// Languages
JAVA: "JAVA"i
JAVASCRIPT: "JAVASCRIPT"i
PYTHON: "PYTHON"i
SCALA: "SCALA"i
// SQL already exists (as keyword, need to ensure it's handled)
SQL: "SQL"i

SEMICOLON: ";"
DOT: "."
COMMA: ","
LPAREN: "("
RPAREN: ")"
EQ: "="
NE: "!=" | "<>"
LT: "<"
GT: ">"
LE: "<="
GE: ">="
PLUS: "+"
MINUS: "-"
STAR: "*"
SLASH: "/"
COLON: ":"
DOUBLE_COLON: "::"
ASSIGN: ":="
LBRACKET: "["
RBRACKET: "]"
LBRACE: "{"
RBRACE: "}"
ELLIPSIS: "..."
DOLLAR_SIGN: "$"
CONCAT: "||"

// Define a terminal for single-quoted strings, handling escaped single quotes
SINGLE_QUOTED_STRING: /'([^']|'')*'/
DOUBLE_QUOTED_STRING: /"([^"]|"")*"/
DOLLAR_QUOTED_STRING: /\$\$.*?\$\$/s
STAGE_PATH: /@[a-zA-Z0-9_\.\-\/]+/
SINGLE_QUOTED_STAGE_PATH: /'@[a-zA-Z0-9_\.\-\/]+'/
PARAMETER: /(\$[0-9]+|:[a-zA-Z_][a-zA-Z0-9_]*|\?)/
PLACEHOLDER: /<[a-zA-Z_][a-zA-Z0-9_\-]*>/

// Add new tokens for stage parameters
DIRECTORY: "DIRECTORY"i
ENCRYPTION: "ENCRYPTION"i

// Common Rules
qualified_name: (IDENTIFIER | PLACEHOLDER) ( DOT (IDENTIFIER | PLACEHOLDER) )*

// Define simple literal types early
string: SINGLE_QUOTED_STRING | DOUBLE_QUOTED_STRING 
number: SIGNED_NUMBER
boolean: TRUE | FALSE

// Start rule - Use the SEMICOLON terminal
start: (_statement_wrapper SEMICOLON?)*
_statement_wrapper: with_clause? _statement // Allow optional WITH before a statement

// A CTE definition
cte: IDENTIFIER AS LPAREN select_stmt RPAREN

// The WITH clause containing one or more CTEs
with_clause: WITH cte ( COMMA cte )*

_statement: statement // Alias to avoid left-recursion issues if statement calls start indirectly

statement: create_replication_group_stmt
         | alter_replication_group_stmt
         | select_stmt
         | dml_stmt
         | ddl_stmt
         | use_stmt
         | copy_into_stmt
         | grant_role_stmt
         | revoke_role_stmt
         | enable_search_optimization_stmt
         | disable_search_optimization_stmt
         | alter_search_optimization_stmt
         | grant_stmt
         | revoke_stmt
         | call_procedure_stmt
         | put_stmt
         | begin_stmt
         | commit_stmt
         | rollback_stmt
         | savepoint_stmt
         | rollback_to_savepoint_stmt
         | declare_stmt
         | declare_block_stmt
         | anonymous_block_stmt
         | set_stmt
         | execute_immediate_stmt
         | execute_task_stmt
         | create_job_stmt
         | alter_job_stmt
         | create_iceberg_table_stmt
         | alter_iceberg_table_stmt
         | drop_iceberg_table_stmt
         | create_package_stmt
         | install_package_stmt
         | remove_package_stmt
         | create_alert_stmt
         | alter_alert_stmt
         | drop_alert_stmt
         | alter_row_access_policy_stmt
         | drop_row_access_policy_stmt
         | alter_table_set_masking_policy_stmt
         | create_authentication_policy_stmt
         | alter_authentication_policy_stmt
         | drop_authentication_policy_stmt
         | create_share_stmt
         | alter_share_stmt
         | drop_share_stmt
         | create_external_table_stmt
         | create_materialized_view_stmt
         | create_network_policy_stmt
         | create_replication_stmt
         | alter_replication_stmt
         | alter_listing_stmt
         | create_account_stmt
         | alter_account_stmt
         | drop_account_stmt
         | show_accounts_stmt
         | alter_session_stmt
         | show_parameters_stmt
         | list_stmt
         | get_stmt
         | remove_stmt
         | alter_stage_stmt
         | create_join_policy_stmt
         | let_stmt
         | cursor_stmt
         | open_stmt
         | create_streamlit_stmt
         | drop_streamlit_stmt
         | create_dynamic_table_stmt
         | drop_dynamic_table_stmt
         | create_hybrid_table_stmt
         | create_dataset_stmt
         | alter_dataset_stmt
         | alter_model_stmt
         | drop_snapshot_stmt
         | create_external_volume_stmt
         | drop_external_volume_stmt
         | undrop_external_volume_stmt
         | create_catalog_integration_stmt
         | drop_catalog_integration_stmt
         | create_compute_pool_stmt
         | drop_compute_pool_stmt
         | create_connection_stmt
         | drop_connection_stmt
         | create_application_package_stmt
         | drop_application_package_stmt
         | create_password_policy_stmt
         | drop_password_policy_stmt
         | create_network_rule_stmt
         | drop_network_rule_stmt
         | create_secret_stmt
         | drop_secret_stmt
         | undrop_iceberg_table_stmt
         | undrop_tag_stmt
         | describe_transaction_stmt
         | ELLIPSIS


// DML Statements
dml_stmt: insert_stmt
        | update_stmt
        | delete_stmt
        | merge_stmt
        | insert_all_stmt

// DDL Statements
ddl_stmt: create_stmt
        | alter_stmt
        | drop_stmt
        | truncate_stmt 
        | show_stmt
        | show_failover_groups_stmt
        | create_replication_group_stmt
        | describe_stmt

// SELECT statement
select_stmt: SELECT DISTINCT? select_list from_clause? where_clause? group_clause? having_clause? qualify_clause? order_clause? limit_clause?
           | LPAREN select_stmt RPAREN
select_list: advanced_star_expr | select_item ( COMMA select_item)*
select_item: expr (AS? IDENTIFIER)?
advanced_star_expr: STAR (EXCLUDE LPAREN qualified_name (COMMA qualified_name)* RPAREN)? (REPLACE_KEYWORD LPAREN replace_item (COMMA replace_item)* RPAREN)? (RENAME_KEYWORD LPAREN rename_item (COMMA rename_item)* RPAREN)?
replace_item: expr AS qualified_name
rename_item: qualified_name AS qualified_name
from_clause: FROM base_table_ref (COMMA base_table_ref)* join_clause*

// Removed old recursive table_ref rule

// Extend base_table_ref in-place to preserve existing tree shape for visitors
base_table_ref: qualified_name sample_clause? pivot_or_unpivot_clause? (AS? IDENTIFIER)?
               | LPAREN select_stmt RPAREN pivot_or_unpivot_clause? (AS? IDENTIFIER)?
               | LPAREN values_clause RPAREN (AS? IDENTIFIER)?
               | LATERAL? function_call (AS? IDENTIFIER)?
               | STAGE_PATH (AS? IDENTIFIER)?
               | stage_table_ref
               | values_clause (AS? IDENTIFIER)?

sample_clause: (SAMPLE | TABLESAMPLE) (BERNOULLI | SYSTEM)? LPAREN (number | expr) (PERCENT | ROWS)? RPAREN

pivot_or_unpivot_clause: pivot_clause | unpivot_clause
pivot_clause: PIVOT LPAREN function_call FOR expr IN LPAREN expr_list RPAREN RPAREN
unpivot_clause: UNPIVOT LPAREN expr FOR IDENTIFIER IN LPAREN expr_list RPAREN RPAREN

stage_table_ref: SINGLE_QUOTED_STRING LPAREN stage_table_options (COMMA stage_table_options)* RPAREN IDENTIFIER?
stage_table_options: FILE_FORMAT FAT_ARROW SINGLE_QUOTED_STRING
                   | PATTERN FAT_ARROW SINGLE_QUOTED_STRING

values_clause: VALUES value_tuple (COMMA value_tuple)*

join_clause: join_type? JOIN base_table_ref (ON expr | USING LPAREN qualified_name ( COMMA qualified_name)* RPAREN)?

join_type: (INNER | LEFT | RIGHT | FULL) (OUTER)? | CROSS | NATURAL
where_clause: WHERE expr
group_clause: GROUP BY expr ( COMMA expr)*
having_clause: HAVING expr
qualify_clause: QUALIFY expr
order_clause: ORDER BY order_item ( COMMA order_item)*
order_item: expr (ASC | DESC)?
limit_clause: LIMIT number

// INSERT statement
insert_stmt: INSERT INTO qualified_name (LPAREN qualified_name ( COMMA qualified_name)* RPAREN)? VALUES value_tuple ( COMMA value_tuple)*
           | INSERT INTO qualified_name (LPAREN qualified_name ( COMMA qualified_name)* RPAREN)? select_stmt

value_tuple: LPAREN expr ( COMMA expr)* RPAREN

// UPDATE statement
update_stmt: UPDATE qualified_name SET qualified_name EQ expr ( COMMA qualified_name EQ expr)* where_clause?

// DELETE statement
delete_stmt: DELETE FROM qualified_name where_clause?

// MERGE statement
merge_stmt: MERGE INTO qualified_name (AS? IDENTIFIER)? USING base_table_ref (AS? IDENTIFIER)? ON expr merge_clause+

merge_clause: when_matched_clause | when_not_matched_clause

when_matched_clause: WHEN MATCHED (AND expr)? THEN merge_matched_action
when_not_matched_clause: WHEN NOT MATCHED (AND expr)? THEN (merge_insert_clause | merge_delete_clause)

merge_matched_action: merge_update_clause | merge_delete_clause

merge_update_clause: UPDATE SET assignment_list (WHERE expr)?
merge_delete_clause: DELETE (WHERE expr)?
merge_insert_clause: INSERT (LPAREN qualified_name ( COMMA qualified_name )* RPAREN)? (VALUES value_tuple | select_stmt)

assignment_list: assignment (COMMA assignment)*
assignment: qualified_name EQ expr

// CREATE statements
create_stmt: create_table_stmt
           | create_view_stmt
           | create_warehouse_stmt
           | create_task_stmt
           | create_stream_stmt
           | create_pipe_stmt
           | create_stage_stmt
           | create_database_stmt
           | create_schema_stmt
           | create_function_stmt
           | create_procedure_stmt
           | create_resource_monitor_stmt
           | create_sequence_stmt
           | create_file_format_stmt
           | create_role_stmt
           | create_masking_policy_stmt
           | create_tag_stmt
           | create_row_access_policy_stmt
           | create_job_stmt
           | create_iceberg_table_stmt
           | create_package_stmt
           | create_alert_stmt
           | create_authentication_policy_stmt
           | create_share_stmt
           | create_integration_stmt
           | create_external_table_stmt
           | create_materialized_view_stmt
           | create_external_function_stmt
           | create_network_policy_stmt
           | create_network_rule_stmt
           | create_secret_stmt
           | create_security_integration_stmt
           | create_replication_stmt
           | create_join_policy_stmt
           | create_service_stmt
           | create_external_listing_stmt
           | create_data_metric_function_stmt
           | create_application_stmt
           | create_streamlit_stmt
           | create_dynamic_table_stmt
           | create_hybrid_table_stmt
           | create_dataset_stmt
           | create_external_volume_stmt
           | create_catalog_integration_stmt
           | create_compute_pool_stmt
           | create_connection_stmt
           | create_application_package_stmt
           | create_password_policy_stmt
           | create_snapshot_stmt

create_table_stmt: CREATE (OR REPLACE)? TRANSIENT? TABLE (IF NOT EXISTS)? qualified_name (LPAREN column_def ( COMMA column_def )* ( COMMA table_constraint )* RPAREN (cluster_by_clause? data_retention_clause? with_tag_clause? table_properties?)? (AS select_stmt)? | AS select_stmt | clone_clause)

table_properties: table_property+

table_property: CLASSIFICATION_PROFILE EQ SINGLE_QUOTED_STRING
              | STORAGE_SERIALIZATION_POLICY EQ (OPTIMIZED | COMPATIBLE)
              | MAX_DATA_EXTENSION_TIME_IN_DAYS EQ number
column_def: qualified_name data_type autoincrement_clause? (column_constraint)* (WITH MASKING POLICY qualified_name)? (COMMENT SINGLE_QUOTED_STRING)?
data_type: IDENTIFIER (LPAREN number ( COMMA number)? RPAREN)? null_constraint?
         | PLACEHOLDER
         | NUMBER (LPAREN number ( COMMA number)? RPAREN)? null_constraint?
         | INT null_constraint?
         | INTEGER null_constraint?
         | VARCHAR (LPAREN number RPAREN)? null_constraint?
         | DOUBLE null_constraint?
         | FLOAT null_constraint?
         | BOOLEAN null_constraint?
         | DATE null_constraint?
         | TIME (LPAREN number RPAREN)? TZ? null_constraint?
         | TIMESTAMP (LPAREN number RPAREN)? null_constraint?
         | TIMESTAMP_NTZ (LPAREN number RPAREN)? null_constraint?
         | TIMESTAMP_LTZ (LPAREN number RPAREN)? null_constraint?
         | TIMESTAMP_TZ (LPAREN number RPAREN)? null_constraint?
         | VARIANT null_constraint?
         | OBJECT (LPAREN object_field_def (COMMA object_field_def)* RPAREN)? null_constraint?
         | ARRAY (LPAREN data_type RPAREN)? null_constraint?
         | MAP (LPAREN data_type COMMA data_type RPAREN)? null_constraint?
         | GEOGRAPHY null_constraint?
         | RESULTSET null_constraint?
         | TABLE LPAREN column_def ( COMMA column_def)* RPAREN

// Null constraint for data types
null_constraint: NOT NULL | NULL

// Object field definition for OBJECT type parameters
object_field_def: IDENTIFIER data_type

// Revert to the simplest constraint definition without extra grouping
column_constraint: NOT NULL 
                 | NULL 
                 | PRIMARY KEY 
                 | UNIQUE 
                 | DEFAULT expr 
                 | REFERENCES qualified_name

// Rule for AUTOINCREMENT/IDENTITY
autoincrement_clause: (AUTOINCREMENT | IDENTITY) (START number INCREMENT number)?

table_constraint: PRIMARY KEY LPAREN qualified_name ( COMMA qualified_name )* RPAREN

create_view_stmt: CREATE (OR REPLACE)? (SECURE)? VIEW qualified_name AS select_stmt

create_warehouse_stmt: CREATE (OR REPLACE)? WAREHOUSE (IF NOT EXISTS)? qualified_name warehouse_param*
warehouse_param: WAREHOUSE_SIZE EQ (IDENTIFIER | SINGLE_QUOTED_STRING)
               | AUTO_SUSPEND EQ number
               | AUTO_RESUME EQ boolean
               | INITIALLY_SUSPENDED EQ boolean

create_task_stmt: CREATE (OR REPLACE)? TASK qualified_name task_param* AS (call_procedure_stmt | _statement_wrapper)
task_param: WAREHOUSE EQ qualified_name
          | SCHEDULE EQ SINGLE_QUOTED_STRING
          | AFTER qualified_name ( COMMA qualified_name )*
          | ALLOW_OVERLAPPING_EXECUTION
          | USER_TASK_TIMEOUT_MS EQ number
          | COMMENT EQ SINGLE_QUOTED_STRING
          | WHEN expr

create_stream_stmt: CREATE (OR REPLACE)? STREAM (IF NOT EXISTS)? qualified_name ON (TABLE | STAGE) qualified_name stream_param* at_before_clause?
stream_param: APPEND_ONLY EQ boolean
            | SHOW_INITIAL_ROWS EQ boolean

// Parameters for stream: append_only, show_initial_rows
at_before_clause: (AT | BEFORE) LPAREN at_before_param ( COMMA at_before_param )* RPAREN
at_before_param: TIMESTAMP FAT_ARROW expr
               | OFFSET FAT_ARROW expr
               | STATEMENT FAT_ARROW expr

// Grammar for create_pipe statement
create_pipe_stmt: CREATE (OR REPLACE)? PIPE (IF NOT EXISTS)? qualified_name pipe_param* AS copy_into_stmt

// Parameters for PIPE
pipe_param: AUTO_INGEST EQ boolean
          | AWS_SNS_TOPIC EQ SINGLE_QUOTED_STRING
          | AZURE_EVENT_GRID_TOPIC EQ SINGLE_QUOTED_STRING
          | GCP_PUBSUB_SUBSCRIPTION EQ SINGLE_QUOTED_STRING
          | COMMENT EQ SINGLE_QUOTED_STRING

create_stage_stmt: CREATE (OR REPLACE)? STAGE qualified_name stage_param*
stage_param: URL EQ SINGLE_QUOTED_STRING
           | FILE_FORMAT EQ (qualified_name | LPAREN file_format_option+ RPAREN)
           | DIRECTORY EQ LPAREN stage_directory_option (COMMA stage_directory_option)* RPAREN
           | ENCRYPTION EQ LPAREN stage_encryption_option (COMMA stage_encryption_option)* RPAREN
           | STORAGE_INTEGRATION EQ qualified_name

// Options for STAGE DIRECTORY and ENCRYPTION
stage_directory_option: IDENTIFIER EQ boolean
stage_encryption_option: IDENTIFIER EQ SINGLE_QUOTED_STRING

// Helper rule for file format options within parentheses
file_format_option: IDENTIFIER EQ (SINGLE_QUOTED_STRING | IDENTIFIER | boolean | number)

create_database_stmt: CREATE (OR REPLACE | OR ALTER)? DATABASE (IF NOT EXISTS)? qualified_name database_properties? clone_clause?

database_properties: database_property+

database_property: COMMENT EQ SINGLE_QUOTED_STRING
                 | EXTERNAL_VOLUME EQ qualified_name
                 | DATA_RETENTION_TIME_IN_DAYS EQ number

create_schema_stmt: CREATE (OR REPLACE | OR ALTER)? (VERSIONED)? SCHEMA (IF NOT EXISTS)? qualified_name schema_properties? clone_clause?

schema_properties: schema_property+

schema_property: CLASSIFICATION_PROFILE EQ SINGLE_QUOTED_STRING
               | DEFAULT_NOTEBOOK_COMPUTE_POOL_CPU EQ SINGLE_QUOTED_STRING
               | DEFAULT_NOTEBOOK_COMPUTE_POOL_GPU EQ SINGLE_QUOTED_STRING

// Dedicated rules for the RETURNS clause structure
returns_clause: RETURNS (data_type | returns_table)
returns_table: TABLE LPAREN column_def ( COMMA column_def)* RPAREN

null_handling: CALLED ON NULL INPUT | (RETURNS NULL ON NULL INPUT | STRICT)
volatility: VOLATILE | IMMUTABLE

// Helper rule for COPY GRANTS option
copy_grants_option: COPY GRANTS

// --- CREATE PROCEDURE ---
create_procedure_stmt: CREATE (OR REPLACE)? PROCEDURE qualified_name function_args (RETURNS data_type)? (LANGUAGE (SQL | JAVASCRIPT | PYTHON | JAVA | SCALA))? procedure_properties? (AS procedure_body)?

// Properties for procedures (excluding LANGUAGE which is already specified)
procedure_properties: procedure_property+

procedure_property: CALLED ON NULL INPUT
                  | RETURNS NULL ON NULL INPUT
                  | STRICT
                  | VOLATILE
                  | IMMUTABLE
                  | RUNTIME_VERSION EQ (SINGLE_QUOTED_STRING | number)
                  | PACKAGES EQ LPAREN SINGLE_QUOTED_STRING ( COMMA SINGLE_QUOTED_STRING)* RPAREN
                  | IMPORTS EQ LPAREN import_location ( COMMA import_location)* RPAREN
                  | HANDLER EQ (IDENTIFIER | SINGLE_QUOTED_STRING)
                  | EXTERNAL_ACCESS_INTEGRATIONS EQ LPAREN SINGLE_QUOTED_STRING ( COMMA SINGLE_QUOTED_STRING)* RPAREN
                  | SECRETS EQ LPAREN SINGLE_QUOTED_STRING ( COMMA SINGLE_QUOTED_STRING)* RPAREN
                  | TARGET_PATH EQ SINGLE_QUOTED_STRING
                  | copy_grants_option
                  | COMMENT EQ SINGLE_QUOTED_STRING
                  | EXECUTE AS OWNER

procedure_body: SINGLE_QUOTED_STRING | DOLLAR_QUOTED_STRING | stored_proc_block | ELLIPSIS

// Stored procedure block syntax
stored_proc_block: (declare_section)? BEGIN statement_list (exception_section)? END
declare_section: DECLARE variable_declaration (SEMICOLON variable_declaration)* (SEMICOLON)?
variable_declaration: IDENTIFIER data_type (DEFAULT expr | ASSIGN expr)?
                    | IDENTIFIER CURSOR FOR (IDENTIFIER | select_stmt)
                    | IDENTIFIER EXCEPTION LPAREN number COMMA SINGLE_QUOTED_STRING RPAREN
statement_list: proc_statement (SEMICOLON proc_statement)* (SEMICOLON)?
proc_statement: if_stmt
              | case_stmt
              | while_stmt
              | for_stmt
              | loop_stmt
              | return_stmt
              | raise_stmt
              | assignment_stmt
              | _statement_wrapper

if_stmt: IF expr THEN statement_list (ELSEIF expr THEN statement_list)* (ELSE statement_list)? END IF

case_stmt: CASE (expr)? (WHEN expr THEN statement_list)+ (ELSE statement_list)? END (CASE)?

while_stmt: WHILE expr DO statement_list END WHILE

for_stmt: FOR IDENTIFIER IN expr DO statement_list END FOR

loop_stmt: LOOP statement_list END LOOP

return_stmt: RETURN (TABLE LPAREN expr RPAREN | expr)?

raise_stmt: RAISE IDENTIFIER

assignment_stmt: qualified_name ASSIGN expr
                | IDENTIFIER ASSIGN expr

exception_section: EXCEPTION (WHEN IDENTIFIER THEN statement_list)+

// --- CREATE FUNCTION (Revised Structure) ---
create_function_stmt: CREATE create_function_mods qualified_name function_args function_returns (function_properties (AS function_impl)? | AS function_impl)?

create_function_mods: (OR REPLACE | OR ALTER)? (TEMP | TEMPORARY)? SECURE? (FUNCTION | AGGREGATE FUNCTION | DATA METRIC FUNCTION | EXTERNAL FUNCTION) (IF NOT EXISTS)?

function_args: LPAREN [argument_def ( COMMA argument_def)* | ELLIPSIS] RPAREN

function_returns: RETURNS (data_type | table_return_type)

table_return_type: TABLE LPAREN column_def ( COMMA column_def)* RPAREN

// Properties that can appear between RETURNS and AS (zero or more)
function_properties: function_property+

function_property: LANGUAGE (SQL | JAVASCRIPT | PYTHON | JAVA | SCALA) // Language is now just another property
                 | CALLED ON NULL INPUT
                 | RETURNS NULL ON NULL INPUT
                 | STRICT
                 | VOLATILE
                 | IMMUTABLE
                 | RUNTIME_VERSION EQ (SINGLE_QUOTED_STRING | number)
                 | PACKAGES EQ LPAREN SINGLE_QUOTED_STRING ( COMMA SINGLE_QUOTED_STRING)* RPAREN
                 | IMPORTS EQ LPAREN import_location ( COMMA import_location)* RPAREN
                 | HANDLER EQ (IDENTIFIER | SINGLE_QUOTED_STRING)
                 | EXTERNAL_ACCESS_INTEGRATIONS EQ LPAREN SINGLE_QUOTED_STRING ( COMMA SINGLE_QUOTED_STRING)* RPAREN
                 | SECRETS EQ LPAREN SINGLE_QUOTED_STRING ( COMMA SINGLE_QUOTED_STRING)* RPAREN
                 | TARGET_PATH EQ SINGLE_QUOTED_STRING
                 | copy_grants_option
                 | COMMENT EQ (SINGLE_QUOTED_STRING | DOUBLE_QUOTED_STRING) // Add COMMENT property here
                 | API_INTEGRATION EQ qualified_name
                 | HEADERS EQ LPAREN header_assignment (COMMA header_assignment)* RPAREN
                 | CONTEXT_HEADERS EQ LPAREN qualified_name (COMMA qualified_name)* RPAREN
                 | MAX_BATCH_ROWS EQ number
                 | COMPRESSION EQ (SINGLE_QUOTED_STRING | DOUBLE_QUOTED_STRING)
                 | SERVICE EQ qualified_name
                 | ENDPOINT EQ qualified_name

function_impl: SINGLE_QUOTED_STRING | DOLLAR_QUOTED_STRING

// Helper for import locations
import_location: SINGLE_QUOTED_STRING | SINGLE_QUOTED_STAGE_PATH

// Helper for header assignments in external functions
header_assignment: (SINGLE_QUOTED_STRING | DOUBLE_QUOTED_STRING) EQ (SINGLE_QUOTED_STRING | DOUBLE_QUOTED_STRING)

// Argument definition with optional default
argument_def: IDENTIFIER data_type [DEFAULT expr]

// ALTER statements
alter_stmt: alter_table_stmt
          | alter_warehouse_stmt
          | alter_resource_monitor_stmt
          | alter_task_stmt
          | alter_stream_stmt
          | alter_pipe_stmt
          | alter_search_optimization_stmt
          | alter_job_stmt
          | alter_iceberg_table_stmt
          | alter_row_access_policy_stmt
          | alter_join_policy_stmt
          | alter_table_set_masking_policy_stmt
          | alter_authentication_policy_stmt
          | alter_share_stmt
          | alter_integration_stmt
          | alter_external_table_stmt
          | alter_materialized_view_stmt
          | alter_external_function_stmt
          | alter_network_policy_stmt
          | alter_replication_stmt
          | alter_session_stmt
          | alter_application_package_stmt
          | alter_schema_stmt
          | alter_account_stmt
          | alter_application_stmt
          | alter_user_stmt
          | alter_snapshot_stmt

alter_table_stmt: ALTER TABLE qualified_name alter_table_action
alter_table_action: ADD COLUMN (IF NOT EXISTS)? qualified_name data_type (DEFAULT expr)?
                  | DROP COLUMN qualified_name
                  | MODIFY COLUMN qualified_name data_type
                  | RENAME COLUMN qualified_name TO qualified_name
                  | RENAME TO qualified_name
                  | CLUSTER BY LPAREN expr (COMMA expr)* RPAREN
                  | ADD ROW ACCESS POLICY qualified_name ON LPAREN qualified_name (COMMA qualified_name)* RPAREN
                  | DROP ROW ACCESS POLICY
                  | DROP ALL ROW ACCESS POLICIES
                  | RENAME ROW ACCESS POLICY TO qualified_name
                  | ADD CONSTRAINT qualified_name PRIMARY KEY LPAREN qualified_name (COMMA qualified_name)* RPAREN constraint_properties?
                  | MODIFY CONSTRAINT qualified_name constraint_properties

constraint_properties: (NOT)? ENFORCED (NOVALIDATE | VALIDATE)? (NORELY | RELY)?

alter_warehouse_stmt: ALTER WAREHOUSE qualified_name alter_warehouse_action
alter_warehouse_action: SET warehouse_set_item+  // Allow one or more items
                      | SUSPEND
                      | RESUME
                      | RENAME TO qualified_name

// Helper rule for SET items in ALTER WAREHOUSE
warehouse_set_item: warehouse_param_key EQ warehouse_param_value

// Define keys and value types allowed in SET
warehouse_param_key: WAREHOUSE_SIZE | AUTO_SUSPEND | AUTO_RESUME | INITIALLY_SUSPENDED
warehouse_param_value: IDENTIFIER | SINGLE_QUOTED_STRING | number | boolean

alter_task_stmt: ALTER TASK qualified_name alter_task_action
alter_task_action: SET WAREHOUSE EQ qualified_name
                 | SET SCHEDULE EQ SINGLE_QUOTED_STRING
                 | SUSPEND
                 | RESUME
                 | REMOVE AFTER (EQ)? qualified_name ( COMMA qualified_name )*
                 | ADD AFTER (EQ)? qualified_name ( COMMA qualified_name )*
                 | MODIFY AS (call_procedure_stmt | _statement_wrapper)

alter_stream_stmt: ALTER STREAM qualified_name SET stream_set_clause

// Grammar for alter_pipe statement
alter_pipe_stmt: ALTER PIPE qualified_name (REFRESH | SET pipe_param ( COMMA pipe_param )*)

// DROP statements
drop_stmt: drop_share_stmt
        | drop_integration_stmt
        | drop_external_table_stmt
        | drop_materialized_view_stmt
        | drop_external_function_stmt
        | drop_network_policy_stmt
        | drop_join_policy_stmt
        | drop_iceberg_table_stmt
        | DROP object_type (IF EXISTS)? qualified_name
        | DROP (IF EXISTS)? ROW ACCESS POLICY qualified_name
        | DROP (IF EXISTS)? MASKING POLICY qualified_name
object_type: TABLE | VIEW | WAREHOUSE | TASK | STREAM | PIPE | STAGE | DATABASE | SCHEMA | PROCEDURE | FUNCTION | SEQUENCE | SHARE | INTEGRATION | STORAGE INTEGRATION | NOTIFICATION INTEGRATION | EXTERNAL TABLE | MATERIALIZED VIEW | EXTERNAL FUNCTION | JOIN POLICY | LISTING | STREAMLIT | DYNAMIC TABLE | HYBRID TABLE | DATASET | MODEL | SNAPSHOT | EXTERNAL VOLUME | CATALOG INTEGRATION | COMPUTE POOL | CONNECTION | APPLICATION PACKAGE | PASSWORD POLICY | NETWORK RULE | NETWORK POLICY | SECRET | SERVICE | ROW ACCESS POLICY | MASKING POLICY | FILE FORMAT

// TRUNCATE statement
truncate_stmt: TRUNCATE TABLE qualified_name

// SHOW statement
show_stmt: SHOW object_types like_clause? scope_clause?
         | SHOW RELEASE DIRECTIVES IN APPLICATION PACKAGE qualified_name
         | SHOW VERSIONS IN APPLICATION PACKAGE qualified_name
         | SHOW SERVICE CONTAINERS IN SERVICE qualified_name
         | SHOW ENDPOINTS IN SERVICE qualified_name
object_types: TABLES | VIEWS | WAREHOUSES | TASKS | STREAMS | STAGES | DATABASES | SCHEMAS
            | SHARES | INTEGRATIONS | REPLICATIONS | EXTERNAL TABLES | MATERIALIZED VIEWS | USERS | ROLES | PARAMETERS | JOIN POLICIES | FAILOVER GROUPS | LISTINGS | RELEASES | STREAMLITS | DYNAMIC_TABLES | DYNAMIC TABLES | HYBRID_TABLES | HYBRID TABLES | DATASETS | MODELS | SNAPSHOTS | EXTERNAL_VOLUMES | EXTERNAL VOLUMES | COMPUTE POOLS | CONNECTIONS | APPLICATION PACKAGES | PASSWORD POLICIES | ROW ACCESS POLICIES | MASKING POLICIES | NETWORK RULES | SECRETS | ICEBERG TABLES | RELEASE_DIRECTIVES | IMAGE REPOSITORIES | SERVICES | VERSIONS
            | NETWORK POLICIES | SEQUENCES | FUNCTIONS | PROCEDURES | FILE FORMATS | STORAGE INTEGRATIONS | NOTIFICATION INTEGRATIONS
like_clause: LIKE SINGLE_QUOTED_STRING
scope_clause: IN (DATABASE | SCHEMA) qualified_name

// DESCRIBE statement
describe_stmt: (DESCRIBE | DESC) object_type qualified_name
             | (DESCRIBE | DESC) TRANSACTION
             | (DESCRIBE | DESC) ROW ACCESS POLICY qualified_name
             | (DESCRIBE | DESC) MASKING POLICY qualified_name
             | (DESCRIBE | DESC) ICEBERG TABLE qualified_name

// USE statement (Example for WAREHOUSE and ROLE)
use_stmt: USE object_type qualified_name
        | USE ROLE IDENTIFIER

// COPY INTO statement
copy_into_stmt: COPY INTO copy_target FROM copy_source copy_option*

copy_target: qualified_name | STAGE_PATH
copy_source: STAGE_PATH | qualified_name | LPAREN select_stmt RPAREN

copy_option: file_format_clause
           | on_error_clause
           | FORCE
           | PATTERN SINGLE_QUOTED_STRING
           | HEADER number
           | VALIDATE boolean
           | PURGE EQ? boolean
           | LOAD_MODE EQ (ADD_FILES_COPY | IDENTIFIER)
           | MATCH_BY_COLUMN_NAME EQ (CASE_SENSITIVE | IDENTIFIER)

file_format_clause: FILE_FORMAT EQ LPAREN file_format_option+ RPAREN // Reuses existing option rule
                  | FILE_FORMAT EQ SINGLE_QUOTED_STRING
                  | FILE_FORMAT EQ IDENTIFIER

on_error_clause: ON_ERROR EQ SINGLE_QUOTED_STRING

// GRANT/REVOKE statements (Basic)
grant_role_stmt: GRANT ROLE qualified_name TO ROLE qualified_name
revoke_role_stmt: REVOKE ROLE qualified_name FROM ROLE qualified_name

grant_stmt: GRANT APPLY ON JOIN POLICY ON ACCOUNT TO grantee_type (qualified_name | PLACEHOLDER)
          | GRANT privilege_list ON object_specification TO grantee_type (qualified_name | PLACEHOLDER)
          | GRANT USAGE ON FUNCTION qualified_name LPAREN function_param_types RPAREN TO (grantee_type (qualified_name | PLACEHOLDER) | PLACEHOLDER | qualified_name)
          | GRANT USAGE ON PROCEDURE qualified_name LPAREN function_param_types RPAREN TO (grantee_type (qualified_name | PLACEHOLDER) | PLACEHOLDER | qualified_name)
revoke_stmt: REVOKE privilege_list ON object_specification FROM grantee_type qualified_name

privilege_list: ALL PRIVILEGES? | privilege ( COMMA privilege )*

privilege: CREATE JOIN POLICY
         | APPLY JOIN POLICY
         | MANAGE RELEASES
         | SELECT
         | INSERT
         | UPDATE
         | DELETE
         | REFERENCES
         | TRIGGER
         | USAGE
         | CREATE
         | APPLY
         | ALTER
         | DROP
         | MANAGE // Add more as needed

object_specification: object_type qualified_name 
                    | DATABASE qualified_name 
                    | SCHEMA qualified_name 
                    | FUTURE object_type IN (DATABASE | SCHEMA) qualified_name 
                    | ALL object_types IN SCHEMA qualified_name
                    | ACCOUNT
                    | JOIN POLICY ON ACCOUNT
                    | APPLICATION PACKAGE qualified_name

grantee_type: ROLE | SHARE | USER | APPLICATION ROLE // Add USER, SHARE etc. if needed

function_param_types: data_type (COMMA data_type)*

// --- Expressions (Revised with Explicit Precedence) ---
expr: disjunction
    | function_call OVER window_spec

disjunction: disjunction OR conjunction | conjunction

conjunction: conjunction AND comparison | comparison

comparison: add_sub (comparison_op add_sub)?

add_sub: add_sub (PLUS | MINUS | CONCAT) mul_div | mul_div

mul_div: mul_div (STAR | SLASH) unary | unary

unary: (NOT | PLUS | MINUS) unary | primary_expr

primary_expr: primary_expr LBRACKET expr RBRACKET      // Array access: a[i]
            | primary_expr COLON IDENTIFIER            // Path access: a:b
            | primary_expr DOT IDENTIFIER              // Path access: a.b (Snowflake allows this after first :) 
            | primary_expr DOUBLE_COLON data_type    // Cast: a::type
            | atom                                     // Base case

atom: literal
     | qualified_name
     | function_call
     | cast_expr
     | case_expr
     | LPAREN expr RPAREN
     | LPAREN select_stmt RPAREN  // Added for scalar subqueries
     | exists_expr
     | quantified_comparison
     | execute_immediate_expr

// Operators split by type
comparison_op: EQ | NE | LT | GT | LE | GE | LIKE | IN | IS | BETWEEN
// binary_op rule removed as operators are handled at specific precedence levels
// unary_op rule removed as operators are handled in the 'unary' rule

cast_expr: CAST LPAREN expr AS data_type cast_modifier? RPAREN

cast_modifier: RENAME FIELDS | ADD FIELDS
case_expr: CASE (expr)? (WHEN expr THEN expr)+ (ELSE expr)? END
exists_expr: EXISTS LPAREN select_stmt RPAREN
execute_immediate_expr: EXECUTE IMMEDIATE (DOLLAR_QUOTED_STRING | PARAMETER | named_parameter | SINGLE_QUOTED_STRING | IDENTIFIER) (USING LPAREN expr_list RPAREN)?
quantified_comparison: expr comparison_op (ANY | ALL | SOME) LPAREN select_stmt RPAREN
                    | expr IN LPAREN expr_list RPAREN

// Function calls (Refactored)
function_call: (qualified_name | system_function | COUNT | SUM | AVG | MAX | MIN | INFER_SCHEMA | ARRAY_AGG | OBJECT_CONSTRUCT | CURRENT_USER | CURRENT_ROLE | REGEXP_REPLACE) LPAREN func_args? RPAREN
system_function: IDENTIFIER DOLLAR_SIGN IDENTIFIER
                | SYSTEM DOLLAR_SIGN LIST_ICEBERG_TABLES_FROM_CATALOG
                | SYSTEM DOLLAR_SIGN LIST_NAMESPACES_FROM_CATALOG
func_args: STAR | DISTINCT expr_list | expr_list | named_arg_list
expr_list: expr ( COMMA expr )*
named_arg_list: named_arg (COMMA named_arg)*
named_arg: IDENTIFIER FAT_ARROW expr

// Literals
literal: string
       | number
       | boolean
       | NULL
       | PARAMETER
       | PLACEHOLDER
       | named_parameter
       | object_literal
       | array_literal

// Object literal: {'key': value, 'key2': value2}
object_literal: LBRACE object_pair_list? RBRACE

object_pair_list: object_pair (COMMA object_pair)*

object_pair: (string | IDENTIFIER) COLON expr

// Array literal: [value1, value2, value3]
array_literal: LBRACKET array_element_list? RBRACKET

array_element_list: expr (COMMA expr)*

named_parameter: COLON IDENTIFIER

TRIGGER: "TRIGGER"i
TRIGGERS: "TRIGGERS"i
PERCENT: "PERCENT"i
DO: "DO"i
NOTIFY: "NOTIFY"i

create_resource_monitor_stmt: CREATE (OR REPLACE)? RESOURCE MONITOR qualified_name WITH CREDIT_QUOTA EQ number triggers_clause?
alter_resource_monitor_stmt: ALTER RESOURCE MONITOR qualified_name (SUSPEND | RESUME)

triggers_clause: TRIGGERS trigger_def+
trigger_def: ON number PERCENT DO NOTIFY

CREDIT_QUOTA: "CREDIT_QUOTA"i

create_sequence_stmt: CREATE (OR REPLACE)? SEQUENCE qualified_name sequence_options?

sequence_options: (START EQ number)? (INCR EQ number | INCREMENT EQ number)?

INCR: "INCR"i

FILE: "FILE"i
FORMAT: "FORMAT"i

create_file_format_stmt: CREATE (OR REPLACE)? FILE FORMAT qualified_name TYPE EQ string file_format_option_kv*
file_format_option_kv: FIELD_DELIMITER EQ string

FIELD_DELIMITER: "FIELD_DELIMITER"i

create_role_stmt: CREATE (OR REPLACE)? (APPLICATION)? ROLE (IF NOT EXISTS)? qualified_name (MANAGED ACCESS)?

ARROW: "->"

create_masking_policy_stmt: CREATE (OR REPLACE)? MASKING POLICY qualified_name AS LPAREN masking_args RPAREN RETURNS data_type ARROW expr masking_policy_options?
masking_args: IDENTIFIER data_type (COMMA IDENTIFIER data_type)*
masking_policy_options: (COMMENT EQ SINGLE_QUOTED_STRING)? (EXEMPT_OTHER_POLICIES EQ boolean)?

CALL: "CALL"i

call_procedure_stmt: CALL qualified_name LPAREN (expr_list)? RPAREN (INTO named_parameter)?

PUT: "PUT"i

put_stmt: PUT file_path STAGE_PATH put_option*
put_option: IDENTIFIER EQ expr
file_path: /file:\/\/[^\s]+/

BEGIN: "BEGIN"i
COMMIT: "COMMIT"i
ROLLBACK: "ROLLBACK"i
SAVEPOINT: "SAVEPOINT"i

begin_stmt: BEGIN
commit_stmt: COMMIT
rollback_stmt: ROLLBACK
savepoint_stmt: SAVEPOINT IDENTIFIER
rollback_to_savepoint_stmt: ROLLBACK TO SAVEPOINT IDENTIFIER

declare_stmt: DECLARE IDENTIFIER data_type
declare_block_stmt: DECLARE variable_declaration (SEMICOLON variable_declaration)* (SEMICOLON)? BEGIN statement_list (exception_section)? END
anonymous_block_stmt: BEGIN statement_list (exception_section)? END
set_stmt: SET IDENTIFIER EQ expr
        | UNSET IDENTIFIER
        | IDENTIFIER ASSIGN expr
        | qualified_name ASSIGN expr

DECLARE: "DECLARE"i

COUNT: "COUNT"i
SUM: "SUM"i
AVG: "AVG"i
MAX: "MAX"i
MIN: "MIN"i

create_tag_stmt: CREATE (OR REPLACE)? TAG (IF NOT EXISTS)? qualified_name (ALLOWED_VALUES value_list)? (COMMENT EQ SINGLE_QUOTED_STRING)?
value_list: SINGLE_QUOTED_STRING (COMMA SINGLE_QUOTED_STRING)*

create_row_access_policy_stmt: CREATE (OR REPLACE)? ROW ACCESS POLICY (IF NOT EXISTS)? qualified_name AS LPAREN row_access_args RPAREN RETURNS BOOLEAN ARROW row_access_body (COMMENT EQ SINGLE_QUOTED_STRING)?
row_access_args: row_access_arg (COMMA row_access_arg)*
row_access_arg: IDENTIFIER data_type
row_access_body: expr

cluster_by_clause: CLUSTER BY LPAREN expr (COMMA expr)* RPAREN
data_retention_clause: DATA_RETENTION_TIME_IN_DAYS EQ number
with_tag_clause: WITH TAG LPAREN tag_assignment (COMMA tag_assignment)* RPAREN
tag_assignment: qualified_name EQ SINGLE_QUOTED_STRING

OVER: "OVER"i
LATERAL: "LATERAL"i

window_spec: LPAREN window_spec_contents RPAREN
// Allow optional PARTITION, optional ORDER, and optional frame in that order
window_spec_contents: partition_by_clause? order_clause? window_frame?
partition_by_clause: PARTITION BY expr (COMMA expr)*

PARTITION: "PARTITION"i

// Window frame support
window_frame: (ROWS | RANGE) BETWEEN frame_bound AND frame_bound
frame_bound: UNBOUNDED PRECEDING
           | number PRECEDING
           | CURRENT ROW
           | number FOLLOWING
           | UNBOUNDED FOLLOWING

argument_func_args: argument_def

FAT_ARROW: "=>"

insert_all_stmt: INSERT ALL when_insert_clause+ select_stmt
when_insert_clause: WHEN expr THEN INTO qualified_name (LPAREN qualified_name (COMMA qualified_name)* RPAREN)? VALUES value_tuple

EXECUTE: "EXECUTE"i
IMMEDIATE: "IMMEDIATE"i

execute_immediate_stmt: EXECUTE IMMEDIATE (DOLLAR_QUOTED_STRING | PARAMETER | named_parameter | SINGLE_QUOTED_STRING | IDENTIFIER) (USING LPAREN expr_list RPAREN)?

IDENTIFIER: /@?[a-zA-Z_][a-zA-Z0-9_\$]*/

// --- TASK Statements ---
// EXECUTE TASK
execute_task_stmt: EXECUTE TASK qualified_name

// SHOW TASKS is covered by the general show_stmt rule

// DESCRIBE TASK is covered by the general describe_stmt rule

// Allow SET of one or more stream parameters
stream_set_clause: stream_param ( COMMA stream_param )*

// Insert search optimization statements
enable_search_optimization_stmt: ENABLE SEARCH OPTIMIZATION ON qualified_name
disable_search_optimization_stmt: DISABLE SEARCH OPTIMIZATION ON qualified_name
alter_search_optimization_stmt: ALTER SEARCH OPTIMIZATION ON qualified_name

// New job statements
create_job_stmt: CREATE (OR REPLACE)? JOB qualified_name job_param* AS _statement_wrapper
alter_job_stmt: ALTER JOB qualified_name (SUSPEND | RESUME | REMOVE SCHEDULE | ADD SCHEDULE SINGLE_QUOTED_STRING)
job_param: WAREHOUSE EQ qualified_name | SCHEDULE EQ SINGLE_QUOTED_STRING | MAX_CONCURRENCY EQ number

// Apache Iceberg table support
create_iceberg_table_stmt: CREATE (OR REPLACE)? ICEBERG TABLE qualified_name (LPAREN column_def (COMMA column_def)* RPAREN)? iceberg_table_param* (AS select_stmt)?
alter_iceberg_table_stmt: ALTER ICEBERG TABLE qualified_name alter_iceberg_action?
drop_iceberg_table_stmt: DROP ICEBERG TABLE qualified_name

iceberg_table_param: EXTERNAL_VOLUME EQ (SINGLE_QUOTED_STRING | qualified_name)
                   | CATALOG EQ (SINGLE_QUOTED_STRING | qualified_name)
                   | METADATA_FILE_PATH EQ SINGLE_QUOTED_STRING
                   | CATALOG_TABLE_NAME EQ SINGLE_QUOTED_STRING
                   | AUTO_REFRESH EQ boolean
                   | BASE_LOCATION EQ SINGLE_QUOTED_STRING
                   | STORAGE_SERIALIZATION_POLICY EQ (OPTIMIZED | COMPATIBLE)
                   | WITH MASKING POLICY qualified_name
                   | WITH ROW ACCESS POLICY qualified_name ON LPAREN qualified_name (COMMA qualified_name)* RPAREN

alter_iceberg_action: CONVERT TO MANAGED iceberg_convert_param*
                    | REFRESH SINGLE_QUOTED_STRING
                    | ALTER COLUMN qualified_name SET DATA TYPE data_type

iceberg_convert_param: BASE_LOCATION EQ SINGLE_QUOTED_STRING
                     | STORAGE_SERIALIZATION_POLICY EQ (OPTIMIZED | COMPATIBLE)

// Snowpark package statements
create_package_stmt: CREATE PACKAGE qualified_name
install_package_stmt: INSTALL PACKAGE qualified_name
remove_package_stmt: REMOVE PACKAGE qualified_name

// Alert statements
create_alert_stmt: CREATE ALERT qualified_name
alter_alert_stmt: ALTER ALERT qualified_name
drop_alert_stmt: DROP ALERT qualified_name

// Row access policy enhancements
alter_row_access_policy_stmt: ALTER ROW ACCESS POLICY qualified_name (SET BODY ARROW expr)?
drop_row_access_policy_stmt: DROP ROW ACCESS POLICY qualified_name
drop_join_policy_stmt: DROP JOIN POLICY (IF EXISTS)? qualified_name

create_join_policy_stmt: CREATE (OR REPLACE)? JOIN POLICY qualified_name AS LPAREN RPAREN RETURNS data_type ARROW expr
alter_join_policy_stmt: ALTER JOIN POLICY qualified_name AS LPAREN RPAREN RETURNS data_type ARROW expr

// Dynamic data masking enhancements
alter_table_set_masking_policy_stmt: ALTER TABLE qualified_name MODIFY COLUMN IDENTIFIER SET MASKING POLICY qualified_name

// Authentication policy statements
create_authentication_policy_stmt: CREATE AUTHENTICATION POLICY qualified_name
alter_authentication_policy_stmt: ALTER AUTHENTICATION POLICY qualified_name
drop_authentication_policy_stmt: DROP AUTHENTICATION POLICY qualified_name

// SHARE statements
create_share_stmt: CREATE (OR REPLACE)? SHARE (IF NOT EXISTS)? qualified_name
alter_share_stmt: ALTER SHARE qualified_name (ADD (DATA | ACCOUNTS EQ qualified_name)? | DROP (DATA | ACCOUNTS EQ qualified_name)?)?
drop_share_stmt: DROP SHARE qualified_name

// Added new Snowflake DDL keywords for full core coverage
CLONE: "CLONE"i
EXTERNAL: "EXTERNAL"i
INTERNAL: "INTERNAL"i
FORCE: "FORCE"i
GET: "GET"i
HEADER: "HEADER"i
INTEGRATION: "INTEGRATION"i
STORAGE_INTEGRATION: "STORAGE_INTEGRATION"i
LIST: "LIST"i
PATTERN: "PATTERN"i
PURGE: "PURGE"i
REPLICATION: "REPLICATION"i
SHARE: "SHARE"i
UNSET: "UNSET"i

// Helper for CLONE statements
clone_clause: CLONE qualified_name

// INTEGRATION statements
create_integration_stmt: CREATE (OR REPLACE)? (EXTERNAL ACCESS | STORAGE | NOTIFICATION)? INTEGRATION (IF NOT EXISTS)? qualified_name integration_param*
alter_integration_stmt: ALTER INTEGRATION qualified_name integration_param*
drop_integration_stmt: DROP INTEGRATION qualified_name

// Parameters for INTEGRATION
integration_param: TYPE EQ (IDENTIFIER | SINGLE_QUOTED_STRING | EXTERNAL_STAGE | QUEUE)
                 | ENABLED EQ boolean
                 | COMMENT EQ SINGLE_QUOTED_STRING
                 | SECRETS EQ LPAREN SINGLE_QUOTED_STRING (COMMA SINGLE_QUOTED_STRING)* RPAREN
                 | ALLOWED_NETWORK_RULES EQ LPAREN SINGLE_QUOTED_STRING (COMMA SINGLE_QUOTED_STRING)* RPAREN
                 | ALLOWED_AUTHENTICATION_SECRETS EQ LPAREN SINGLE_QUOTED_STRING (COMMA SINGLE_QUOTED_STRING)* RPAREN
                 | STORAGE_PROVIDER EQ (SINGLE_QUOTED_STRING | IDENTIFIER)
                 | STORAGE_ALLOWED_LOCATIONS EQ LPAREN SINGLE_QUOTED_STRING (COMMA SINGLE_QUOTED_STRING)* RPAREN
                 | STORAGE_BLOCKED_LOCATIONS EQ LPAREN SINGLE_QUOTED_STRING (COMMA SINGLE_QUOTED_STRING)* RPAREN
                 | STORAGE_AWS_ROLE_ARN EQ SINGLE_QUOTED_STRING
                 | AZURE_TENANT_ID EQ SINGLE_QUOTED_STRING
                 | NOTIFICATION_PROVIDER EQ (GCP_PUBSUB | IDENTIFIER)
                 | GCP_PUBSUB_SUBSCRIPTION_NAME EQ SINGLE_QUOTED_STRING

// External Table statements
create_external_table_stmt: CREATE (OR REPLACE)? EXTERNAL TABLE (IF NOT EXISTS)? qualified_name external_table_options
alter_external_table_stmt: ALTER EXTERNAL TABLE qualified_name (REFRESH)?
drop_external_table_stmt: DROP EXTERNAL TABLE qualified_name

external_table_options: external_table_option*
external_table_option: USING TEMPLATE LPAREN select_stmt RPAREN
                      | LOCATION EQ STAGE_PATH
                      | WITH LOCATION EQ STAGE_PATH
                      | FILE_FORMAT EQ (qualified_name | LPAREN file_format_option+ RPAREN)
                      | TABLE_FORMAT EQ DELTA
                      | AUTO_REFRESH EQ boolean
                      | INTEGRATION EQ SINGLE_QUOTED_STRING

// Materialized View statements
create_materialized_view_stmt: CREATE (OR REPLACE)? MATERIALIZED VIEW (IF NOT EXISTS)? qualified_name AS select_stmt
alter_materialized_view_stmt: ALTER MATERIALIZED VIEW qualified_name
drop_materialized_view_stmt: DROP MATERIALIZED VIEW qualified_name

// External Function statements
create_external_function_stmt: CREATE (OR REPLACE)? SECURE? EXTERNAL FUNCTION (IF NOT EXISTS)? qualified_name function_args? function_returns? external_function_properties? (AS SINGLE_QUOTED_STRING)?
alter_external_function_stmt: ALTER EXTERNAL FUNCTION qualified_name
drop_external_function_stmt: DROP EXTERNAL FUNCTION qualified_name

// Properties for external functions
external_function_properties: external_function_property+
external_function_property: API_INTEGRATION EQ qualified_name
                          | HEADERS EQ LPAREN header_assignment (COMMA header_assignment)* RPAREN
                          | CONTEXT_HEADERS EQ LPAREN qualified_name (COMMA qualified_name)* RPAREN
                          | MAX_BATCH_ROWS EQ number
                          | COMPRESSION EQ SINGLE_QUOTED_STRING
                          | COMMENT EQ SINGLE_QUOTED_STRING

// Network Policy statements
create_network_policy_stmt: CREATE (OR REPLACE)? NETWORK POLICY qualified_name
alter_network_policy_stmt: ALTER NETWORK POLICY qualified_name
drop_network_policy_stmt: DROP NETWORK POLICY qualified_name

// Security Integration statements
create_security_integration_stmt: CREATE (OR REPLACE)? SECURITY INTEGRATION qualified_name security_integration_param+
security_integration_param: TYPE EQ (IDENTIFIER | EXTERNAL_STAGE)
                           | ENABLED EQ boolean
                           | STORAGE_PROVIDER EQ (S3 | IDENTIFIER)
                           | STORAGE_AWS_ROLE_ARN EQ SINGLE_QUOTED_STRING

// Replication statements (simple)
create_replication_stmt: CREATE (OR REPLACE)? REPLICATION (IF NOT EXISTS)? qualified_name
alter_replication_stmt: ALTER REPLICATION qualified_name

// Replication Group statements
create_replication_group_stmt: CREATE (OR REPLACE)? REPLICATION GROUP (IF NOT EXISTS)? qualified_name replication_group_clause+
alter_replication_group_stmt: ALTER REPLICATION GROUP qualified_name REFRESH

// Clauses for replication group
replication_group_clause: OBJECT_TYPES EQ replication_type_list
                        | ALLOWED_DATABASES EQ replication_identifier_list
                        | ALLOWED_SHARES EQ replication_identifier_list
                        | ALLOWED_ACCOUNTS EQ replication_identifier_list
                        | AS REPLICA OF qualified_name
replication_type_list: (DATABASES | SHARES) (COMMA (DATABASES | SHARES))*
replication_identifier_list: qualified_name (COMMA qualified_name)*

// Account-level statements
create_account_stmt: CREATE (OR REPLACE)? ACCOUNT (IF NOT EXISTS)? qualified_name
alter_account_stmt: ALTER ACCOUNT qualified_name
                  | ALTER ACCOUNT SET DEFAULT_NOTEBOOK_COMPUTE_POOL_GPU EQ SINGLE_QUOTED_STRING
                  | ALTER ACCOUNT SET DEFAULT_NOTEBOOK_COMPUTE_POOL_CPU EQ SINGLE_QUOTED_STRING
drop_account_stmt: DROP ACCOUNT qualified_name
show_accounts_stmt: SHOW ACCOUNTS

// Session management statements
alter_session_stmt: ALTER SESSION SET IDENTIFIER EQ expr
show_parameters_stmt: SHOW PARAMETERS

// Stage file utilities
list_stmt: LIST STAGE_PATH (PATTERN SINGLE_QUOTED_STRING)?
get_stmt: GET file_path STAGE_PATH (PURGE | VALIDATE)?
remove_stmt: REMOVE STAGE_PATH (PATTERN SINGLE_QUOTED_STRING)?
alter_stage_stmt: ALTER STAGE qualified_name (SET (FILE_FORMAT EQ qualified_name | URL EQ SINGLE_QUOTED_STRING) | REFRESH)

// Show failover groups statement
show_failover_groups_stmt: SHOW FAILOVER GROUPS (IN ACCOUNT qualified_name)?

// Additional CREATE statements
create_service_stmt: CREATE (OR REPLACE)? SERVICE (IF NOT EXISTS)? qualified_name service_param*

// Service parameters
service_param: IN COMPUTE POOL qualified_name
             | FROM SPECIFICATION_TEMPLATE_FILE EQ SINGLE_QUOTED_STRING
             | FROM SPECIFICATION_FILE EQ SINGLE_QUOTED_STRING
             | FROM SPECIFICATION DOLLAR_QUOTED_STRING
             | MIN_INSTANCES EQ number
             | MAX_INSTANCES EQ number
create_external_listing_stmt: CREATE (OR REPLACE)? EXTERNAL LISTING qualified_name (SHARE qualified_name)? (AS DOLLAR_QUOTED_STRING)? listing_param*

// Listing parameters
listing_param: PUBLISH EQ boolean
             | REVIEW EQ boolean
create_data_metric_function_stmt: CREATE (OR REPLACE)? DATA METRIC FUNCTION qualified_name function_args? function_returns? function_properties? (AS function_impl)?

// CREATE APPLICATION statement
create_application_stmt: CREATE APPLICATION qualified_name FROM APPLICATION PACKAGE qualified_name

// Additional statement types
let_stmt: LET IDENTIFIER (CURSOR FOR select_stmt | EQ expr | ASSIGN expr)
cursor_stmt: LET IDENTIFIER CURSOR FOR select_stmt
open_stmt: OPEN IDENTIFIER (USING LPAREN expr_list RPAREN)?

// ALTER LISTING statement
alter_listing_stmt: ALTER LISTING qualified_name (PUBLISH | UNPUBLISH | AS DOLLAR_QUOTED_STRING)

// ALTER APPLICATION PACKAGE statement
alter_application_package_stmt: ALTER APPLICATION PACKAGE qualified_name alter_app_package_action

alter_app_package_action: SET DEFAULT RELEASE DIRECTIVE ACCOUNTS EQ LPAREN qualified_name RPAREN VERSION EQ (IDENTIFIER | SINGLE_QUOTED_STRING) PATCH EQ (number | SINGLE_QUOTED_STRING) UPGRADE_AFTER EQ SINGLE_QUOTED_STRING
                        | SET DEFAULT RELEASE DIRECTIVE VERSION EQ (IDENTIFIER | SINGLE_QUOTED_STRING) PATCH EQ SINGLE_QUOTED_STRING UPGRADE_AFTER EQ SINGLE_QUOTED_STRING
                        | SET DEFAULT RELEASE DIRECTIVE VERSION EQ (IDENTIFIER | SINGLE_QUOTED_STRING) PATCH EQ (number | SINGLE_QUOTED_STRING) UPGRADE_AFTER EQ SINGLE_QUOTED_STRING
                        | SET DEFAULT RELEASE DIRECTIVE VERSION EQ (IDENTIFIER | SINGLE_QUOTED_STRING) PATCH EQ (number | SINGLE_QUOTED_STRING)
                        | SET RELEASE DIRECTIVE IDENTIFIER ACCOUNTS EQ LPAREN qualified_name RPAREN VERSION EQ (IDENTIFIER | SINGLE_QUOTED_STRING) PATCH EQ (number | SINGLE_QUOTED_STRING)
                        | SET RELEASE DIRECTIVE IDENTIFIER VERSION EQ (IDENTIFIER | SINGLE_QUOTED_STRING) PATCH EQ (number | SINGLE_QUOTED_STRING)
                        | MODIFY RELEASE DIRECTIVE IDENTIFIER VERSION EQ (IDENTIFIER | SINGLE_QUOTED_STRING) PATCH EQ (number | SINGLE_QUOTED_STRING)
                        | UNSET RELEASE DIRECTIVE IDENTIFIER
                        | SET DISTRIBUTION EQ (EXTERNAL | INTERNAL)

alter_schema_stmt: ALTER SCHEMA qualified_name SET schema_property (COMMA schema_property)*
                 | ALTER SCHEMA qualified_name SET schema_property schema_property+

alter_application_stmt: ALTER APPLICATION qualified_name UPGRADE

alter_user_stmt: ALTER USER (qualified_name | PLACEHOLDER) SET user_property (COMMA user_property)*

user_property: RSA_PUBLIC_KEY EQ SINGLE_QUOTED_STRING
             | IDENTIFIER EQ (SINGLE_QUOTED_STRING | IDENTIFIER | boolean | number)

// ========== STREAMLIT STATEMENTS ==========
create_streamlit_stmt: CREATE (OR REPLACE)? STREAMLIT qualified_name FROM (STAGE_PATH | SINGLE_QUOTED_STAGE_PATH) streamlit_param*
drop_streamlit_stmt: DROP STREAMLIT qualified_name

streamlit_param: MAIN_FILE EQ SINGLE_QUOTED_STRING
               | QUERY_WAREHOUSE EQ qualified_name

// ========== DYNAMIC TABLE STATEMENTS ==========
create_dynamic_table_stmt: CREATE (OR REPLACE)? DYNAMIC (ICEBERG)? TABLE qualified_name (LPAREN (column_def (COMMA column_def)* | simple_column_list) RPAREN)? dynamic_table_param* AS select_stmt
simple_column_list: qualified_name (COMMA qualified_name)*
drop_dynamic_table_stmt: DROP DYNAMIC TABLE qualified_name

dynamic_table_param: TARGET_LAG EQ SINGLE_QUOTED_STRING
                   | WAREHOUSE EQ qualified_name
                   | REFRESH_MODE EQ INCREMENTAL
                   | INITIALIZE EQ ON_CREATE
                   | COMMENT EQ SINGLE_QUOTED_STRING
                   | EXTERNAL_VOLUME EQ (SINGLE_QUOTED_STRING | qualified_name)
                   | CATALOG EQ (SINGLE_QUOTED_STRING | qualified_name)
                   | BASE_LOCATION EQ SINGLE_QUOTED_STRING

// ========== HYBRID TABLE STATEMENTS ==========
create_hybrid_table_stmt: CREATE (OR REPLACE)? HYBRID TABLE qualified_name LPAREN column_def (COMMA column_def)* RPAREN

// ========== DATASET STATEMENTS ==========
create_dataset_stmt: CREATE (OR REPLACE)? DATASET qualified_name
alter_dataset_stmt: ALTER DATASET qualified_name DROP VERSION SINGLE_QUOTED_STRING

// ========== MODEL STATEMENTS ==========
alter_model_stmt: ALTER MODEL qualified_name alter_model_action

alter_model_action: DROP VERSION IDENTIFIER
                  | SET COMMENT EQ SINGLE_QUOTED_STRING
                  | SET DEFAULT_VERSION EQ SINGLE_QUOTED_STRING
                  | SET TAG qualified_name EQ SINGLE_QUOTED_STRING
                  | VERSION IDENTIFIER SET ALIAS EQ SINGLE_QUOTED_STRING
                  | SET (model_set_property (COMMA? model_set_property)*)

model_set_property: COMMENT EQ SINGLE_QUOTED_STRING
                  | DEFAULT_VERSION EQ SINGLE_QUOTED_STRING
                  | IDENTIFIER EQ SINGLE_QUOTED_STRING

// ========== SNAPSHOT STATEMENTS ==========
create_snapshot_stmt: CREATE (OR REPLACE)? SNAPSHOT (IF NOT EXISTS)? qualified_name FROM SERVICE qualified_name
alter_snapshot_stmt: ALTER SNAPSHOT (IF EXISTS)? qualified_name SET COMMENT EQ SINGLE_QUOTED_STRING
drop_snapshot_stmt: DROP SNAPSHOT qualified_name

// ========== EXTERNAL VOLUME STATEMENTS ==========
create_external_volume_stmt: CREATE (OR REPLACE)? EXTERNAL VOLUME qualified_name STORAGE_LOCATIONS EQ LPAREN storage_location (COMMA storage_location)* RPAREN
drop_external_volume_stmt: DROP EXTERNAL VOLUME qualified_name
undrop_external_volume_stmt: UNDROP EXTERNAL VOLUME qualified_name

storage_location: LPAREN storage_location_param (COMMA? storage_location_param)* RPAREN

storage_location_param: NAME EQ SINGLE_QUOTED_STRING
                      | STORAGE_PROVIDER EQ (S3 | AZURE | GCS | SINGLE_QUOTED_STRING)
                      | STORAGE_BASE_URL EQ SINGLE_QUOTED_STRING
                      | STORAGE_AWS_ROLE_ARN EQ SINGLE_QUOTED_STRING
                      | AZURE_TENANT_ID EQ SINGLE_QUOTED_STRING
                      | STORAGE_GCP_SERVICE_ACCOUNT EQ SINGLE_QUOTED_STRING

// ========== CATALOG INTEGRATION STATEMENTS ==========
create_catalog_integration_stmt: CREATE (OR REPLACE)? CATALOG INTEGRATION qualified_name catalog_integration_param*
drop_catalog_integration_stmt: DROP CATALOG INTEGRATION qualified_name

catalog_integration_param: CATALOG_SOURCE EQ (POLARIS | OBJECT_STORE | ICEBERG_REST)
                         | TABLE_FORMAT EQ ICEBERG
                         | CATALOG_NAMESPACE EQ SINGLE_QUOTED_STRING
                         | REST_CONFIG EQ LPAREN rest_config_param (COMMA? rest_config_param)* RPAREN
                         | REST_AUTHENTICATION EQ LPAREN rest_auth_param (COMMA? rest_auth_param)* RPAREN
                         | ENABLED EQ boolean

rest_config_param: CATALOG_URI EQ SINGLE_QUOTED_STRING
                 | CATALOG_NAME EQ SINGLE_QUOTED_STRING

rest_auth_param: TYPE EQ OAUTH
               | OAUTH_CLIENT_ID EQ SINGLE_QUOTED_STRING
               | OAUTH_CLIENT_SECRET EQ SINGLE_QUOTED_STRING
               | OAUTH_ALLOWED_SCOPES EQ LPAREN SINGLE_QUOTED_STRING (COMMA SINGLE_QUOTED_STRING)* RPAREN
               | OAUTH_TOKEN_URI EQ SINGLE_QUOTED_STRING

// ========== COMPUTE POOL STATEMENTS ==========
create_compute_pool_stmt: CREATE (OR REPLACE)? COMPUTE POOL qualified_name compute_pool_param*
drop_compute_pool_stmt: DROP COMPUTE POOL qualified_name

compute_pool_param: MIN_NODES EQ number
                  | MAX_NODES EQ number
                  | INSTANCE_FAMILY EQ (CPU_X64_XS | IDENTIFIER)

// ========== CONNECTION STATEMENTS ==========
create_connection_stmt: CREATE (OR REPLACE)? CONNECTION qualified_name
drop_connection_stmt: DROP CONNECTION qualified_name

// ========== APPLICATION PACKAGE STATEMENTS ==========
create_application_package_stmt: CREATE (OR REPLACE)? APPLICATION PACKAGE qualified_name application_package_param*

application_package_param: DISTRIBUTION EQ (EXTERNAL | INTERNAL)
drop_application_package_stmt: DROP APPLICATION PACKAGE qualified_name

// ========== PASSWORD POLICY STATEMENTS ==========
create_password_policy_stmt: CREATE (OR REPLACE)? PASSWORD POLICY qualified_name password_policy_param*
drop_password_policy_stmt: DROP PASSWORD POLICY qualified_name

password_policy_param: PASSWORD_MIN_LENGTH EQ number
                     | PASSWORD_MAX_LENGTH EQ number
                     | PASSWORD_MIN_UPPER_CASE_CHARS EQ number
                     | PASSWORD_MIN_LOWER_CASE_CHARS EQ number
                     | PASSWORD_MIN_NUMERIC_CHARS EQ number
                     | PASSWORD_MIN_SPECIAL_CHARS EQ number
                     | PASSWORD_MIN_AGE_DAYS EQ number
                     | PASSWORD_MAX_AGE_DAYS EQ number
                     | PASSWORD_MAX_RETRIES EQ number
                     | PASSWORD_LOCKOUT_TIME_MINS EQ number
                     | PASSWORD_HISTORY EQ number
                     | COMMENT EQ SINGLE_QUOTED_STRING

// ========== NETWORK RULE STATEMENTS ==========
create_network_rule_stmt: CREATE (OR REPLACE)? NETWORK RULE qualified_name network_rule_param*
drop_network_rule_stmt: DROP NETWORK RULE qualified_name

network_rule_param: MODE EQ INGRESS
                  | TYPE EQ (IPV4 | SINGLE_QUOTED_STRING)
                  | VALUE_LIST EQ LPAREN SINGLE_QUOTED_STRING (COMMA SINGLE_QUOTED_STRING)* RPAREN

// ========== SECRET STATEMENTS ==========
create_secret_stmt: CREATE (OR REPLACE)? SECRET qualified_name secret_param*
drop_secret_stmt: DROP SECRET qualified_name

secret_param: TYPE EQ (PASSWORD | OAUTH2 | GENERIC_SECRET | SINGLE_QUOTED_STRING)
            | USERNAME EQ SINGLE_QUOTED_STRING
            | PASSWORD EQ SINGLE_QUOTED_STRING
            | API_AUTHENTICATION EQ (SINGLE_QUOTED_STRING | OAUTH2 | API_KEY | AWS_SIGV4)
            | OAUTH2_REFRESH_TOKEN EQ SINGLE_QUOTED_STRING
            | API_KEY EQ SINGLE_QUOTED_STRING
            | AWS_KEY_ID EQ SINGLE_QUOTED_STRING
            | AWS_SECRET_KEY EQ SINGLE_QUOTED_STRING

// ========== UNDROP STATEMENTS ==========
undrop_iceberg_table_stmt: UNDROP ICEBERG TABLE qualified_name
undrop_tag_stmt: UNDROP TAG qualified_name

// ========== DESCRIBE TRANSACTION ==========
describe_transaction_stmt: DESCRIBE TRANSACTION